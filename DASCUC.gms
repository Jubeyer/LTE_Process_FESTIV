*     Header     *

** DASCUC MODEL **
$onempty
$SETGLOBAL SUSD_TRAJECTORY_CHECK "YES"


*DECLARE GEN AND INTERVAL SETS
SET
INTERVAL
GEN
GENPARAM
COSTCURVEPARAM
SYSPARAM
BLOCK
GENBLOCK

*UNIQUE GEN SETS
WIND_GEN(GEN)
STEAM_GEN(GEN)
CT_GEN(GEN)
CC_GEN(GEN)
HYDRO_GEN(GEN)
NUCLEAR_GEN(GEN)
PV_GEN(GEN)
INTERFACE(GEN)
OUTAGE_GEN(GEN)
VARIABLE_DISPATCH_GEN(GEN)
CONVENTIONAL_GEN(GEN)
VARIABLE_GEN(GEN)
RAMP_LIMITED_GEN(GEN)
RAMP_LIMITED_GEN_NOSTARTUP(GEN)
EVERYTHING_BUT_INTERFACE(GEN)
VARIABLE_CAPACITY_RESOURCE(GEN)
MIN_GEN_GEN(GEN)
AVAILABLE_GEN(GEN)
** Addition on November 08,2020
RAMP_LIMITED_GEN_NONUC(GEN)
MIN_GEN_GEN_NONUC(GEN)
NONUC_GEN(GEN)
ACTIVE_GEN(GEN)
HES_GEN(GEN)

*
ELECTROLYZER /EZ1/
;

*DECLARE NETWORK SETS
SET
BUS
BRANCHPARAM
BRANCH

*BUS SETS
SLACKBUS(BUS)
NONSLACK_BUS(BUS)

*UNIQUE BRANCH SETS
CTGC_BRANCH(BRANCH)
AC_LINE(BRANCH)
FIXED_PAR(BRANCH)
ADJUSTABLE_PAR(BRANCH)
PAR(BRANCH)
HVDC(BRANCH)
BRANCH_AC(BRANCH)
;

*DECLARE RESERVE SETS
SET
RESERVEPARAM
RESERVETYPE
;

*DECLARE STORAGE SETS
SET
STORAGEPARAM

*UNIQUE STORAGE SETS
PUMPED_STORAGE_HYDRO(GEN)
ESR(GEN)
LESR(GEN)
CSP_GEN(GEN)
STORAGE_GEN(GEN)
CONVENTIONAL_STORAGE_GEN(GEN)
UNCONVENTIONAL_STORAGE_GEN(GEN)
NON_CONVENTIONAL_STORAGE(GEN)
NOT_STORAGE_GEN(GEN)
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(GEN)
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN_NOSTARTUP(GEN)
MIN_GEN_CONVENTIONAL_STORAGE_GEN(GEN)
;

*DECLARE UC SETS
SET
MIN_RUN_GEN(GEN,INTERVAL)
MIN_DOWN_GEN(GEN,INTERVAL)
;

*DECLARE VARIABLE STARTUP SETS
SET
START_PARAMETER
STARTUP_TYPE

*VARIABLE STARTUP SUBSETS
VARIABLE_START_GEN(GEN)
NONVARIABLE_START_GEN(GEN)
MAX_START_GEN(GEN)
;

*     Declare_Parameters     *

*DECLARE SCALARS
SCALAR
INTERVAL_LENGTH
INTERVAL_UPDATE
NUMINTERVAL
PROCESS_TIME
INTERVAL_ADVISORY_LENGTH
LOSS_BIAS
;

*DECLARE GEN AND MAIN PARAMETERS
PARAMETERS
SYSTEMVALUE
INTERVAL_MINUTES(*)
BLOCK_COST(*,*)
BLOCK_CAP(*,*)
QSC
COST_CURVE(*,*)
LOAD(*)
GENVALUE(*,*)
VG_FORECAST(*,*)
GEN_FORCED_OUT(*)
;

*DECLARE NETWORK PARAMETERS
PARAMETERS
LOAD_DIST(*)
PTDF(*,*)
PTDF_PAR(*,*)
LODF(*,*)
BRANCHDATA(*,*)
BUS_DELIVERY_FACTORS(*,*)
GEN_DELIVERY_FACTORS(*,*)
;

*DECLARE RESERVE PARAMETERS
PARAMETERS
RESERVEVALUE(*,*)
RESERVE_COST(*,*)
RESERVELEVEL(*,*)
;

*DECLARE STORAGE PARAMETERS
PARAMETERS
STORAGEVALUE(*,*)
END_STORAGE_PENALTY_PLUS_PRICE(GEN)
END_STORAGE_PENALTY_MINUS_PRICE(GEN)
;

*DECLARE STORAGE UC PARAMETERS
PARAMETERS
PUMPUP_PERIOD(GEN)
PUMPDOWN_PERIOD(GEN)
PUMPING_ENFORCED_ON(GEN,INTERVAL)
PUMPING_ENFORCED_OFF
PREVIOUS_UNIT_PUMPUP
INTERVALS_STARTED_AGO
INTERVALS_PUMPUP_AGO
INITIAL_PUMPDOWN_PERIODS(GEN)
INTERVALS_PUMPDOWN_AGO(GEN)
;

*DECLARE UC PARAMETERS
PARAMETERS
STARTUP_PERIOD(GEN)
SHUTDOWN_PERIOD(GEN)
UNIT_STATUS_ENFORCED_ON(GEN,INTERVAL)
UNIT_STATUS_ENFORCED_OFF(GEN,INTERVAL)
PREVIOUS_UNIT_STARTUP
PREVIOUS_UNIT_PUMPUP
INTERVALS_STARTED_AGO
INITIAL_SHUTDOWN_PERIODS(GEN)
INTERVALS_SHUTDOWN_AGO(GEN)
********************************************************************************
*UNIT_STABLE_STATUS_ENFORCED_ON(GEN,INTERVAL)
;

*DECLARE VARIABLE STARTUP PARAMETERS
PARAMETERS
STARTUP_VALUE(*,*)
OFFLINE_BLOCK
STARTUP_COST_BLOCK
MAX_OFFLINE_TIME
INITIAL_STARTUP_COST_HELPER
MAX_OFFLINE_TIME
*$onText
INITIAL_HYDROGEN_STORAGE /300/
ELECTROLYZER_RAMP_RATE /0.10/
*$offText

;


*     Load_Inputs     *

*LOAD BASE INPUTS
$GDXIN GENERAL_MODEL_INPUT
$load GEN
$load BUS
$load GENPARAM
$load RESERVEPARAM
$load BRANCHPARAM
$load COSTCURVEPARAM
$load BRANCH
$load SYSPARAM
$load RESERVETYPE
$load BLOCK
$load GENBLOCK
$load SYSTEMVALUE

*LOAD DASCUC GEN AND MAIN INPUTS
$GDXIN DASCUCINPUT1
*STATIC PARAMETERS
$load BLOCK_COST
$load BLOCK_CAP
$load COST_CURVE

$GDXIN DASCUCINPUT2
*DYNAMIC SCALARS
$load INTERVAL_LENGTH
$load NUMINTERVAL
$load INTERVAL_MINUTES

*DYNAMIC SETS
$load INTERVAL
*DYNAMIC PARAMETERS
$load LOAD
$load GENVALUE
$load VG_FORECAST
$load GEN_FORCED_OUT

*LOAD DASCUC NETWORK INPUTS
$GDXIN DASCUCINPUT1
$load LOAD_DIST
$load PTDF
$load PTDF_PAR
$load LODF
$load BRANCHDATA

$GDXIN DASCUCINPUT2
*DYNAMIC SCALARS
$load LOSS_BIAS
*DYNAMIC PARAMETERS
$load BUS_DELIVERY_FACTORS
$load GEN_DELIVERY_FACTORS

*LOAD DASCUC RESERVE INPUTS
*STATIC SCALAR
$GDXIN DASCUCINPUT1
$load RESERVEVALUE
$load RESERVE_COST
$load QSC

$GDXIN DASCUCINPUT2
*DYNAMIC SCALARS
$load RESERVELEVEL

*LOAD DASCUC STORAGE INPUTS
$GDXIN GENERAL_MODEL_INPUT
$load STORAGEPARAM
$GDXIN DASCUCINPUT2
*DYNAMIC PARAMETERS
$load STORAGEVALUE
$load END_STORAGE_PENALTY_PLUS_PRICE
$load END_STORAGE_PENALTY_MINUS_PRICE

*LOAD DASCUC STORAGE UC INPUTS
$GDXIN DASCUCINPUT1
$load PUMPUP_PERIOD
$load PUMPDOWN_PERIOD

$GDXIN DASCUCINPUT2
$load PUMPING_ENFORCED_ON
$load PUMPING_ENFORCED_OFF
$load PREVIOUS_UNIT_PUMPUP
$load INTERVALS_PUMPUP_AGO
$load INITIAL_PUMPDOWN_PERIODS
$load INTERVALS_PUMPDOWN_AGO

*LOAD DASCUC UC INPUTS
$GDXIN DASCUCINPUT1
$load STARTUP_PERIOD
$load SHUTDOWN_PERIOD

$GDXIN DASCUCINPUT2
$load UNIT_STATUS_ENFORCED_ON
$load UNIT_STATUS_ENFORCED_OFF
$load PREVIOUS_UNIT_STARTUP
$load INTERVALS_STARTED_AGO
$load INITIAL_SHUTDOWN_PERIODS
$load INTERVALS_SHUTDOWN_AGO
$onText November 28,2022
$load UNIT_STABLE_STATUS_ENFORCED_ON
$offText

*LOAD DASCUC VARIABLE STARTUP INPUTS
$GDXIN DASCUCINPUT1
$load START_PARAMETER
$load STARTUP_VALUE
$load OFFLINE_BLOCK
$load STARTUP_COST_BLOCK

$GDXIN DASCUCINPUT2
$load MAX_OFFLINE_TIME
$load INITIAL_STARTUP_COST_HELPER


*GEN SET DEFINITIONS
STEAM_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 1);
CT_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 2);
CC_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 3);
HYDRO_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 4);
NUCLEAR_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 5);
WIND_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 7);
PV_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 10);
INTERFACE(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 14);
OUTAGE_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 15);
VARIABLE_DISPATCH_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 16);
AVAILABLE_GEN(GEN) = GEN(GEN) - OUTAGE_GEN(GEN);
CONVENTIONAL_GEN(GEN) = STEAM_GEN(GEN) + CT_GEN(GEN) + CC_GEN(GEN) + HYDRO_GEN(GEN) + NUCLEAR_GEN(GEN);
VARIABLE_GEN(GEN) = WIND_GEN(GEN) + PV_GEN(GEN);
** Addition on November 08,2020
ACTIVE_GEN(GEN)=GEN(GEN)-OUTAGE_GEN(GEN)-NUCLEAR_GEN(GEN)-PV_GEN(GEN);
NONUC_GEN(GEN)=GEN(GEN)-OUTAGE_GEN(GEN)-NUCLEAR_GEN(GEN);
HES_GEN(GEN)=NUCLEAR_GEN(GEN)+PV_GEN(GEN);


**

LOOP (GEN,
         IF(GENVALUE(GEN,"MIN_GEN") EQ 0 OR GENVALUE(GEN,"STARTUP_TIME") EQ 0 OR GENVALUE(GEN,"SHUTDOWN_TIME") EQ 0,
                 IF(GENVALUE(GEN,"RAMP_RATE") GT 0 AND GENVALUE(GEN,"RAMP_RATE") LT GENVALUE(GEN,"CAPACITY")/(INTERVAL_LENGTH*60),
                         RAMP_LIMITED_GEN_NOSTARTUP(GEN) = YES;
                   );
         ELSE
                 IF(GENVALUE(GEN,"RAMP_RATE") GT 0,
                         IF((GENVALUE(GEN,"CAPACITY") - GENVALUE(GEN,"MIN_GEN"))/GENVALUE(GEN,"RAMP_RATE") + 60*MAX(GENVALUE(GEN,"STARTUP_TIME"),60*GENVALUE(GEN,"SHUTDOWN_TIME")) GT (INTERVAL_LENGTH*60),
                                 RAMP_LIMITED_GEN(GEN) = YES;
                           );
                   );
            );
     );
RAMP_LIMITED_GEN(GEN) = RAMP_LIMITED_GEN(GEN) - OUTAGE_GEN(GEN);
RAMP_LIMITED_GEN_NOSTARTUP(GEN) = RAMP_LIMITED_GEN_NOSTARTUP(GEN) - OUTAGE_GEN(GEN);
EVERYTHING_BUT_INTERFACE(GEN) = GEN(GEN) - INTERFACE(GEN) - VARIABLE_DISPATCH_GEN(GEN);
VARIABLE_CAPACITY_RESOURCE(GEN) = VARIABLE_GEN(GEN) + VARIABLE_DISPATCH_GEN(GEN);
MIN_GEN_GEN(GEN) = YES$(GENVALUE(GEN,"MIN_GEN") NE 0);
MIN_GEN_GEN(GEN) = MIN_GEN_GEN(GEN) - OUTAGE_GEN(GEN);
******************************
MIN_GEN_GEN_NONUC(GEN) = MIN_GEN_GEN(GEN) - NUCLEAR_GEN(GEN);
RAMP_LIMITED_GEN_NONUC(GEN)=RAMP_LIMITED_GEN(GEN)-NUCLEAR_GEN(GEN);


ALIAS (INTERVAL,H);
ALIAS (GEN,G);

*BRANCH SET DEFINITIONS
SLACKBUS(BUS) = YES$(ORD(BUS) EQ SYSTEMVALUE("SLACK_BUS"));
NONSLACK_BUS(BUS) = BUS(BUS) - SLACKBUS(BUS);
CTGC_BRANCH(BRANCH) = YES$(BRANCHDATA(BRANCH,"CTGC_MONITOR") EQ 1);
AC_LINE(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 1);
FIXED_PAR(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 2);
ADJUSTABLE_PAR(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 3);
PAR(BRANCH) = FIXED_PAR(BRANCH) + ADJUSTABLE_PAR(BRANCH);
HVDC(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 4);
BRANCH_AC(BRANCH) = BRANCH(BRANCH) - HVDC(BRANCH);

ALIAS (BUS,BUS2,BUS3,BUS4);
ALIAS (NONSLACK_BUS,NONSLACK_BUS1);
ALIAS (BRANCH,BRANCH2);
ALIAS (BRANCH_AC2,BRANCH_AC);

ALIAS (RESERVETYPE,R);

*STORAGE SET DEFINITIONS
*Needs UC decisions
PUMPED_STORAGE_HYDRO(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 6);
*Does not need UC decisions
ESR(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 8);
*Only provides A/S
LESR(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 9);
CSP_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 11);
STORAGE_GEN(GEN) = PUMPED_STORAGE_HYDRO(GEN) + ESR(GEN) + LESR(GEN) + CSP_GEN(GEN);
CONVENTIONAL_STORAGE_GEN(GEN) = STORAGE_GEN(GEN) - ESR(GEN) - LESR(GEN) - CSP_GEN(GEN);
UNCONVENTIONAL_STORAGE_GEN(GEN) = STORAGE_GEN(GEN) - CONVENTIONAL_STORAGE_GEN(GEN);
NON_CONVENTIONAL_STORAGE(GEN) = GEN(GEN) - CONVENTIONAL_STORAGE_GEN(GEN);
NOT_STORAGE_GEN(GEN) = GEN(GEN) - STORAGE_GEN(GEN);
LOOP (STORAGE_GEN,
         IF(STORAGEVALUE(STORAGE_GEN,"MIN_GEN") EQ 0 OR STORAGEVALUE(STORAGE_GEN,"PUMP_STARTUP_TIME") EQ 0 OR STORAGEVALUE(STORAGE_GEN,"PUMP_SHUTDOWN_TIME") EQ 0,
                 IF(STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") GT 0 AND STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") LT STORAGEVALUE(STORAGE_GEN,"CAPACITY")/(INTERVAL_LENGTH*60),
                         RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN_NOSTARTUP(STORAGE_GEN) = YES;
                   );
         ELSE
                 IF((STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") GT 0 AND  (STORAGEVALUE(STORAGE_GEN,"CAPACITY") - STORAGEVALUE(STORAGE_GEN,"MIN_GEN"))/STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") + 60*MAX(STORAGEVALUE(STORAGE_GEN,"PUMP_STARTUP_TIME"),STORAGEVALUE(STORAGE_GEN,"PUMP_SHUTDOWN_TIME")) GT (INTERVAL_LENGTH*60)),
                         RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(STORAGE_GEN) = YES;
                   );
            );
     );
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) - OUTAGE_GEN(CONVENTIONAL_STORAGE_GEN);
MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = YES$(STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_PUMP") NE 0);
MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) - OUTAGE_GEN(CONVENTIONAL_STORAGE_GEN);

*DASCUC UC SET DEFINITIONS
MIN_RUN_GEN(GEN,INTERVAL) = YES$(GENVALUE(GEN,"MIN_RUN_TIME") GT INTERVAL_LENGTH);
MIN_RUN_GEN(GEN,INTERVAL) = MIN_RUN_GEN(GEN,INTERVAL) - OUTAGE_GEN(GEN);
MIN_DOWN_GEN(GEN,INTERVAL) = YES$(GENVALUE(GEN,"MIN_DOWN_TIME") GT INTERVAL_LENGTH);
MIN_DOWN_GEN(GEN,INTERVAL) = MIN_DOWN_GEN(GEN,INTERVAL) - OUTAGE_GEN(GEN);

SET STARTUP_TYPE /HOT, WARM, COLD/;
VARIABLE_START_GEN(GEN) = YES$(GENVALUE(GEN,"VARIABLE_STARTUP") EQ 1);
NONVARIABLE_START_GEN(GEN) = GEN(GEN) - VARIABLE_START_GEN(GEN);
MAX_START_GEN(GEN) = YES$(GENVALUE(GEN,"MAX_STARTS") GT 0 AND GENVALUE(GEN,"MAX_STARTS") LT NUMINTERVAL*INTERVAL_LENGTH/2);
MAX_START_GEN(GEN) = MAX_START_GEN(GEN) - OUTAGE_GEN(GEN);

$GDXIN DASCUCINPUT1
$IFI '%USEGAMS%' == 'NO'     PARAMETER INJECTION_FACTOR(BUS,GEN) GENERATOR PARTICIPATION FACTORS ;
$IFI '%USEGAMS%' == 'NO'     $LOAD INJECTION_FACTOR
$IFI '%USEGAMS%' == 'YES'    PARAMETER INJECTION_FACTOR(BUS,GEN) GENERATOR INJECTION FACTORS /
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\PARTF.inc";
$IFI '%USEGAMS%' == 'YES'    /  ;

$IFI '%USEGAMS%' == 'NO'     SET GENBUS(BUS,GEN) LIST OF GENS AND THEIR BUSES  ;
$IFI '%USEGAMS%' == 'NO'     $LOAD GENBUS
$IFI '%USEGAMS%' == 'YES'    SET GENBUS(BUS,GEN) LIST OF GENS AND THEIR BUSES /
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\GENBUSSET.inc";
$IFI '%USEGAMS%' == 'YES'    /;

$IFI '%USEGAMS%' == 'NO'     SET BRANCHBUS(BRANCH,BUS,BUS2) BRANCH FROM_BUS AND TO_BUS CONNECTION   ;
$IFI '%USEGAMS%' == 'NO'     $LOAD BRANCHBUS
$IFI '%USEGAMS%' == 'YES'    SET BRANCHBUS(BRANCH,BUS,BUS2) BRANCH FROM_BUS AND TO_BUS CONNECTION/
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\BRANCHBUS.inc";
$IFI '%USEGAMS%' == 'YES'    /;

* Assigning Parameter Values****************************************************
*
$onText
GENVALUE("CC NG 04","STARTUP_TIME")= 16;
GENVALUE("CC NG 04","SHUTDOWN_TIME")= 16;
GENVALUE("CC NG 04","RAMP_RATE")= 0.15;
GENVALUE("CC NG 04","GEN_TYPE")= 1;
GENVALUE("CC NG 04","INITIAL_STATUS")= 0;
GENVALUE("CC NG 04","MAX_STARTS")= 1;
*GENVALUE(NUCLEAR_GEN,"CAPACITY")= 2;
*GENVALUE(NUCLEAR_GEN,"MIN_GEN")= 0.25;
*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")= 0.015;
$offText



*     Declare_Variables     *

*DECLARE GEN AND MAIN VARIABLES
VARIABLES
PRODCOST
PRODCOST_BY_INTERVAL(INTERVAL)
GEN_SCHEDULE(GEN,INTERVAL)
GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)
;

POSITIVE VARIABLES
LOSS_LOAD(INTERVAL)
ADDITIONAL_LOAD_SLACK(INTERVAL)
RAMP_UP_PENALTY(GEN,INTERVAL)
RAMP_DOWN_PENALTY(GEN,INTERVAL)

*** Added on May 24,2022 *******
****************************
*$onText
HT_DEMAND_VAR(INTERVAL)
ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL)
HYDROGEN_STORAGE_LEVEL(ELECTROLYZER,INTERVAL)
HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)
*$offText
;

*DECLARE NETWORK VARIABLES
VARIABLES
NET_ENERGY(BUS,INTERVAL)
LINEFLOW(BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE(BRANCH,INTERVAL)
PHASE_SHIFTER_CONTRIBUTION(BUS,INTERVAL)
HVDC_CONTRIBUTION(BUS,INTERVAL)
LINEFLOW_CTGC(BRANCH,BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE_CTGC(BRANCH,BRANCH,INTERVAL)
HVDC_CONTRIBUTION_OFFSET_CTGC(BRANCH,BUS,INTERVAL)
;

POSITIVE VARIABLES
PHASE_SHIFTER_ANGLE1(BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE2(BRANCH,INTERVAL)
BRANCH_SLACK1(BRANCH,INTERVAL)
BRANCH_SLACK2(BRANCH,INTERVAL)
;

*DECLARE RESERVE VARIABLES
POSITIVE VARIABLES
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)
INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
TOTAL_RESERVE(INTERVAL,RESERVETYPE)
;

*DECLARE STORAGE VARIABLES
VARIABLES
ENDING_STORAGE(GEN)

STORAGE_LEVEL(GEN,INTERVAL) VARIABLE REFERS TO STORAGE LEVEL AT END OF INTERVAL

;

POSITIVE VARIABLES
CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL)
NC_STORAGE_GEN_SCHEDULE(GEN,INTERVAL)
NC_STORAGE_PUMP_SCHEDULE(GEN,INTERVAL)
WASTED_STORAGE(GEN,INTERVAL)
END_STORAGE_PENALTY_PLUS
END_STORAGE_PENALTY_MINUS
PUMP_EFFICIENCY(GEN,INTERVAL)
GEN_EFFICIENCY(GEN,INTERVAL)
;

*DECLARE STORAGE COMMITMENT VARIABLES
*INTEGER VARIABLES
$IFI '%USE_INTEGER%' == YES INTEGER VARIABLE PUMPING(GEN,INTERVAL), UNIT_PUMPUP(GEN,INTERVAL), UNIT_PUMPDOWN(GEN,INTERVAL) SIMILAR TO UNIT_STATUS SIGNIFIES A UNIT IS IN PUMP MODE;
$IFI NOT '%USE_INTEGER%' == YES VARIABLE PUMPING(GEN,INTERVAL), UNIT_PUMPUP(GEN,INTERVAL), UNIT_PUMPDOWN(GEN,INTERVAL) SIMILAR TO UNIT_STATUS SIGNIFIES A UNIT IS IN PUMP MODE;

*DECLARE UNIT COMMITMENT VARIABLES
*INTEGER VARIABLES
$IFI '%USE_INTEGER%' == YES INTEGER VARIABLE UNIT_STATUS(GEN,INTERVAL), UNIT_STARTUP(GEN,INTERVAL), UNIT_SHUTDOWN(GEN,INTERVAL);
$IFI NOT '%USE_INTEGER%' == YES VARIABLE UNIT_STATUS(GEN,INTERVAL), UNIT_STARTUP(GEN,INTERVAL), UNIT_SHUTDOWN(GEN,INTERVAL);

*DECLARE VARIABLE STARTUP COST VARIABLES
POSITIVE VARIABLES
STARTUP_COST(GEN,INTERVAL)
STARTUP_COST_HELPER(GEN,INTERVAL)
HOUR_OFFLINE(GEN,INTERVAL)
OFFLINE_HOUR_SLACK(GEN,INTERVAL,STARTUP_TYPE)
;
*Nuclear Xenon Poisoning Variables
*$onText
INTEGER VARIABLES
NUCLEAR_RAMP_UP(GEN,INTERVAL)
NUCLEAR_RAMP_DN(GEN,INTERVAL)
NUCLEAR_STABLE(GEN,INTERVAL);
*$offText

*INTEGER VARIABLES
$IFI '%USE_INTEGER%' == YES INTEGER VARIABLE STARTUP_BLOCK_STATUS(GEN,INTERVAL,STARTUP_TYPE) SIGNIFIES WHETHER A UNIT IS IN HOT WARM OR COLD STATE WHILE STARTING UP;
$IFI NOT '%USE_INTEGER%' == YES VARIABLE STARTUP_BLOCK_STATUS(GEN,INTERVAL,STARTUP_TYPE) SIGNIFIES WHETHER A UNIT IS IN HOT WARM OR COLD STATE WHILE STARTING UP;


*     Define_Variables     *

*GEN VARIABLE LIMITS
GEN_BLOCK_SCHEDULE.LO(AVAILABLE_GEN,"BLOCK1",INTERVAL) = MIN(GENVALUE(AVAILABLE_GEN,"MIN_GEN"),0);
GEN_BLOCK_SCHEDULE.LO(GEN,BLOCK,INTERVAL)$(ORD(BLOCK) GT 1) = 0;
RAMP_UP_PENALTY.UP(GEN,INTERVAL)=0;
RAMP_DOWN_PENALTY.UP(GEN,INTERVAL)=0;
GEN_SCHEDULE.LO(OUTAGE_GEN,INTERVAL)=0;
GEN_SCHEDULE.UP(OUTAGE_GEN,INTERVAL)=0;
GEN_BLOCK_SCHEDULE.LO(OUTAGE_GEN,"BLOCK1",INTERVAL) = 0;
GEN_BLOCK_SCHEDULE.UP(OUTAGE_GEN,"BLOCK1",INTERVAL) = 0;

*NETWORK VARIABLE LIMITS
PHASE_SHIFTER_ANGLE.UP(AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.LO(AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.UP(HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.LO(HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.UP(BRANCH,AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.LO(BRANCH,AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.UP(BRANCH,HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.LO(BRANCH,HVDC,INTERVAL) = 0;

*RESERVE VARIABLE LIMITS
GEN_RESERVE_SCHEDULE.UP(OUTAGE_GEN,INTERVAL,RESERVETYPE) = 0;
GEN_RESERVE_SCHEDULE.UP(INTERFACE,INTERVAL,RESERVETYPE) = 0;

*STORAGE VARIABLE LIMITS
CONVENTIONAL_PUMP_SCHEDULE.UP(NOT_STORAGE_GEN,INTERVAL) = 0;

PUMPING.UP(NOT_STORAGE_GEN,INTERVAL) = 0;
PUMPING.UP(STORAGE_GEN,INTERVAL) = 1;
PUMPING.LO(GEN,INTERVAL) = 0;
UNIT_PUMPUP.UP(NOT_STORAGE_GEN,INTERVAL) = 0;
UNIT_PUMPUP.UP(STORAGE_GEN,INTERVAL) = 1;
UNIT_PUMPUP.LO(GEN,INTERVAL) = 0;
UNIT_PUMPDOWN.UP(NOT_STORAGE_GEN,INTERVAL) = 0;
UNIT_PUMPDOWN.UP(STORAGE_GEN,INTERVAL) = 1;
UNIT_PUMPDOWN.LO(GEN,INTERVAL) = 0;

*UC VARIABLE LIMITS
UNIT_STATUS.UP(GEN,INTERVAL) = 1;
UNIT_STATUS.LO(GEN,INTERVAL) = 0;
UNIT_STARTUP.UP(GEN,INTERVAL) = 1;
UNIT_STARTUP.LO(GEN,INTERVAL) = 0;
UNIT_SHUTDOWN.UP(GEN,INTERVAL) = 1;
UNIT_SHUTDOWN.LO(GEN,INTERVAL) = 0;
UNIT_STATUS.UP(OUTAGE_GEN,INTERVAL)= 0;

*VARIABLE STARTUPCOST VARIABLE LIMITS
STARTUP_BLOCK_STATUS.UP(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE) = 1;
STARTUP_BLOCK_STATUS.UP(NONVARIABLE_START_GEN,INTERVAL,STARTUP_TYPE) = 0;
STARTUP_BLOCK_STATUS.LO(GEN,INTERVAL,STARTUP_TYPE) = 0;



*NUCLEAR INTEGER VARIABLE LIMITS
NUCLEAR_RAMP_UP.UP(GEN,INTERVAL)=1;
NUCLEAR_RAMP_DN.UP(GEN,INTERVAL)=1;
NUCLEAR_STABLE.UP(GEN,INTERVAL)=1;

NUCLEAR_RAMP_UP.LO(GEN,INTERVAL)=0;
NUCLEAR_RAMP_DN.LO(GEN,INTERVAL)=0;
NUCLEAR_STABLE.LO(GEN,INTERVAL)=0;

****************** Added on May 24, 2022 ************
HT_DEMAND_VAR.UP(INTERVAL)=0.5;
HT_DEMAND_VAR.LO(INTERVAL)=0.2;

*     Declare_Equations     *

*DECLARE NORMAL GEN AND MAIN EQUATIONS
EQUATIONS
OBJECTIVE FUNCTION USED FOR MINIMIZATION
OBJECTIVEB(INTERVAL)
Q_LOAD_BALANCE(INTERVAL) EQUALS TOTAL GENERATION TO TOTAL LOAD

*DISPATCH CONSTRAINTS
Q_GENTOTAL(GEN,INTERVAL) TOTAL BLOCK GENERATION EQUALS SCHEDULE
Q_GEN_BLOCK_LIMIT1(GEN,BLOCK,INTERVAL) FOR BLOCK 1
Q_GEN_BLOCK_LIMIT2(GEN,BLOCK,INTERVAL) FOR OTHER BLOCKS
Q_GENLIMIT_HIGH(GEN,INTERVAL) CAPACITY CONSTRAINT
Q_GENLIMIT_HIGH2(GEN,INTERVAL) CAPACITY CONSTRAINT WITH RESERVES TOO
Q_RAMP_RATE_UP_BASIC(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_DOWN_BASIC(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_UP_BASIC0(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_DOWN_BASIC0(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_VARIABLE_FORECAST(GEN,INTERVAL) WIND AND PV GENERATORS LIMIT BASED ON FORECASTS IS ADJUSTED EACH INTERVAL
;

*DECLARE NETWORK EQUATIONS
$IFI '%NETWORK_CHECK%' == YES EQUATIONS
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1(BRANCH,INTERVAL) LOW LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2(BRANCH,INTERVAL) HIGH LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3(BRANCH,INTERVAL) ADDING BOTH TO SHOW NEGATIVE
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4(BRANCH,INTERVAL) 'FIXED PARS UPPER'
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5(BRANCH,INTERVAL) FIXED PARS LOWER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER(BUS,INTERVAL) TURNING PHASE SHIFTER TO ENERGY INJECTION
$IFI '%NETWORK_CHECK%' == YES Q_HVDC(BUS,INTERVAL) FROM BUS OF HVDC SAME AS SINK AND TO BUS SAME AS SOURCE
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW(BRANCH,INTERVAL) DEFINES TRANSMISSION FLOWS BASED ON DELTA ANGLES AND BPRIME
$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY(BUS,INTERVAL) NET ENERGY LEAVING A BUS
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT IN NEGATIVE DIRECTION

*NETWORK CONTINGENCY CONSTRAINTS
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC(BRANCH,BRANCH2,INTERVAL) DEFINES TRANSMISSION FLOWS FOLLOWING CONTINGENCY BASED ON DELTA ANGLES AND BPRIME
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC2(BRANCH,BRANCH2,INTERVAL) FLOW OF TRIPPED TX IS 0
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC(BRANCH,BRANCH,INTERVAL) ANGLE OF PAR THAT IS OUT IS 0
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC2(BRANCH,BRANCH,INTERVAL) ANGLE OF PAR THAT IS NOT OUT IS SAME AS PRECTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_HVDC_CTGC(BRANCH,BUS,INTERVAL) IF HVDC FAILS ADJUST BUS OUTPUTS
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC(BRANCH,BRANCH2,INTERVAL) EMERGENCY TRANSMISSION LIMIT CONSTRAINT FOLLOWING CONTINGENCY
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC(BRANCH,BRANCH2,INTERVAL) EMERGENCY TRANSMISSION LIMIT CONSTRAINT IN OTHER DIRECTION FOLLOWING CONTINGENCY
$IFI '%CONTINGENCY_CHECK%' == YES ;

*DECLARE RESERVE EQUATIONS
EQUATIONS
Q_RESERVE_TOTAL(INTERVAL,RESERVETYPE) INCLUDE INCLUSIVE RESERVES
Q_RESERVE_BALANCE(INTERVAL,RESERVETYPE) TOTAL RESERVE SCHEDULES GREATER EQUAL TO REQUIREMENT
Q_RESERVE_BALANCE2(INTERVAL,RESERVETYPE) TOTAL RESERVE SCHEDULES EQUAL TO ZERO IF REQUIREMENT IS ZERO
*RESERVE CONSTRAINTS
Q_RESERVE_CAPABILITY(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE
Q_RESERVE_RAMPUP_LIMIT(GEN,INTERVAL) SHARING RAMP CAPABILITY BETWEEN RESERVE PRODUCTS
Q_RESERVE_RAMPDOWN_LIMIT (GEN,INTERVAL) SHARING RAMP CAPABILITY BETWEEN RESERVE PRODUCTS
Q_RESERVE_CAPABILITY_VG(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE FOR VG
Q_VARIABLE_RESERVE_CAPACITY(GEN,INTERVAL) IF WIND OR VG CAN PROVIDE RESERVES MUST BE BELOW FORECAST RATHER THAN NAMEPLATE
;

*DECLARE UNIT COMMITMENT EQUATIONS
EQUATIONS
Q_MIN_RUN_TIME(GEN,INTERVAL) MIN RUN TIME CONSTRAINT
Q_MIN_RUN_TIME2(GEN,INTERVAL) MIN RUN TIME FOR ENDING INTERVALS
Q_MIN_DOWN_TIME(GEN,INTERVAL) MIN DOWN TIME CONSTRAINT
Q_MIN_DOWN_TIME2(GEN,INTERVAL) MIN DOWN TIME CONSTRAINT FOR ENDING INTERVALS
Q_COMMITMENT_HARD_HI(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT ON BY INTERVAL
Q_COMMITMENT_HARD_LO(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT OFF BY INTERVAL
Q_STARTUP(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES
Q_STARTUP2(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES FOR INTERVAL 0
Q_STARTUP3(GEN,INTERVAL) MAKE SURE CANNOT SU AND SD SIMULATANEOUSLY. COSTS WILL USUALLY DRIVE THESE DOWN IF THEY ARE NOT NECESSARY ANYWAY
Q_EARLY_SHUTDOWN1(GEN,INTERVAL) IN CASE A UNIT WANTS TO SHUTDOWN IN THE BEGINNING OF THE OPTIMIZATION
********************************************************************************


;

*DECLARE STORAGE DISPATCH EQUATIONS
EQUATIONS
Q_PUMPMAXLIMIT(GEN,INTERVAL) MAXIMUM PUMPING LIMIT
Q_PUMPMINLIMIT(GEN,INTERVAL) MINIMUM PUMPING LIMIT
Q_PUMP_RAMP_RATE_DOWN(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY
Q_PUMP_RAMP_RATE_DOWN2(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY FOR INTERVAL 0
Q_PUMPMINLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
Q_PUMPMAXLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
;

*DECLARE STORAGE UC EQUATIONS
EQUATIONS
Q_PUMP_HARD_HI(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT ON BY INTERVAL
Q_PUMP_HARD_LO(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT OFF BY INTERVAL
Q_GENPUMP(GEN,INTERVAL)   CANNOT GENERATE AND PUMP AT THE SAME TIME
Q_MIN_PUMP_TIME(GEN,INTERVAL) MIN PUMP TIME CONSTRAINT
Q_MIN_PUMP_TIME2(GEN,INTERVAL) MIN PUMP TIME FOR ENDING INTERVALS
Q_PUMPUP(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES
Q_PUMPUP3(GEN,INTERVAL) MAKE SURE CANNOT SU AND SD SIMULATANEOUSLY. COSTS WILL USUALLY DRIVE THESE DOWN IF THEY ARE NOT NECESSARY ANYWAY
;

*DECLARE SU/SD TRAJECTORY EQUATIONS
EQUATIONS
Q_SU_GENLIMITLOW_TRAJECTORY1(GEN,INTERVAL)
Q_SU_GENLIMITLOW_TRAJECTORY2(GEN,INTERVAL)
Q_SU_GENLIMITLOW_TRAJECTORY3(GEN,INTERVAL)
Q_SU_RAMPUP_TRAJECTORY1(GEN,INTERVAL)
Q_SU_RAMPUP_TRAJECTORY2(GEN,INTERVAL)
Q_SU_RAMPDOWN_TRAJECTORY1(GEN,INTERVAL)
Q_SU_RAMPDOWN_TRAJECTORY2(GEN,INTERVAL)
Q_SU_RESERVE_TRAJECTORY1(GEN,INTERVAL,RESERVETYPE)
Q_SU_RESERVE_TRAJECTORY2(GEN,INTERVAL,RESERVETYPE)
Q_SU_RESERVE_TRAJECTORY3(GEN,INTERVAL,RESERVETYPE)
;

*DECLARE SU/SD TRAJECTORY STORAGE CONSTRAINTS EQUATIONS
EQUATIONS
Q_SU_PUMP_RAMPUP_TRAJECTORY1(GEN,INTERVAL)
Q_SU_PUMP_RAMPUP_TRAJECTORY2(GEN,INTERVAL)
Q_SU_PUMP_RAMPDOWN_TRAJECTORY1(GEN,INTERVAL)
Q_SU_PUMP_RAMPDOWN_TRAJECTORY2(GEN,INTERVAL)
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY1(GEN,INTERVAL)
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY2(GEN,INTERVAL)
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY3(GEN,INTERVAL)
Q_SU_PUMP_RESERVE_TRAJECTORY1(GEN,GEN,INTERVAL,RESERVETYPE)
Q_SU_PUMP_RESERVE_TRAJECTORY2(GEN,GEN,INTERVAL,RESERVETYPE)
Q_SU_PUMP_RESERVE_TRAJECTORY3(GEN,GEN,INTERVAL,RESERVETYPE)
;

*DECLARE STORAGE SIMPLE RT EFFICIENCY ENERGY LIMITS EQUATIONS
EQUATIONS
$onText
Q_STORAGE_GENERATING_START (GEN,INTERVAL) DEFINES THE AMOUNT OF ENERGY STORAGE AT THE BEGINNING OF THE DAY
Q_STORAGE_GENERATING(GEN,INTERVAL) STORAGE AMOUNT REDUCES DUE TO GENERATING AND INCREASES DUE TO PUMPING
$offText

*$onText
Q_STORAGE_GENERATING_START (GEN,GEN,INTERVAL) DEFINES THE AMOUNT OF ENERGY STORAGE AT THE BEGINNING OF THE DAY
Q_STORAGE_GENERATING(GEN,GEN,INTERVAL) STORAGE AMOUNT REDUCES DUE TO GENERATING AND INCREASES DUE TO PUMPING
*$offText



Q_STORAGE_END(GEN) TO ENFORCE ENDING STORAGE LEVEL
Q_STORAGE_MAX(GEN,INTERVAL)  MAXIMUM AMOUNT OF STORAGE CAPABILITY
Q_STORAGE_MIN(GEN,INTERVAL)  MINIMUM AMOUNT OF STORAGE CAPABILITY
Q_STORAGE_RESERVEUP1(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR FOR INTERVAL 0
Q_STORAGE_RESERVEUP2(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR
Q_STORAGE_RESERVEDOWN1(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR FOR INTERVAL 0
Q_STORAGE_RESERVEDOWN2(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR
Q_STORAGE_GEN_EFFICIENCY9(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY9(GEN,INTERVAL)
;

*DECLARE DASCUC INTERVAL1 EQUATIONS
EQUATIONS
Q_SU_RAMPUP_TRAJECTORY0(GEN,INTERVAL)
Q_SU_RAMPDOWN_TRAJECTORY0(GEN,INTERVAL)
;

*DECLARE EQUATIONS
EQUATIONS
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY0(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY0(GEN,INTERVAL)
Q_PUMPUP2(GEN,INTERVAL)
;

*DECLARE VARIABLE STARTUPCOST EQUATIONS
EQUATIONS
Q_MAX_START(GEN,INTERVAL) GEN CAN ONLY HAVE SO MANY STARTS PER DAY
Q_HOURS_OFFLINE1(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE2(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE3(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE4(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE5(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE6(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE7(GEN,INTERVAL) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE8(GEN,INTERVAL,STARTUP_TYPE) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_HOURS_OFFLINE9(GEN,INTERVAL,STARTUP_TYPE) EQUATIONS TO CALCULATE OFFLINE TIME AND TIE IT TO HOT WARM COLD STATUS
Q_VARIABLE_STARTUP1(GEN,INTERVAL) EQUATIONS FOR DETERMINING STARTUP COST
Q_VARIABLE_STARTUP2(GEN,INTERVAL) EQUATIONS FOR DETERMINING STARTUP COST
Q_VARIABLE_STARTUP3(GEN,INTERVAL) EQUATIONS FOR DETERMINING STARTUP COST
Q_VARIABLE_STARTUP4(GEN,INTERVAL) EQUATIONS FOR DETERMINING STARTUP COST
Q_VARIABLE_STARTUP5(GEN,INTERVAL) EQUATIONS FOR DETERMINING STARTUP COST
;

*Nuclear Characteristics Equations
EQUATIONS

*************************************
Q_GENLIMIT_LOW_NUC(GEN,INTERVAL)

Q_NUCLEAR_MUST_RUN(GEN,INTERVAL)
** Added on May 24 ,2022 *****
Q_LTE_GEN(GEN,GEN,INTERVAL)

*------------------------------------------*
$onText
Q_PUMPMINLIMIT2_FC(GEN,GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES From Fuel Cell
Q_PUMPMAXLIMIT2_FC(GEN,GEN,INTERVAL)
$offText

Q_GENPUMP_UC(GEN,INTERVAL)
$onText
Q_GENPUMP_FC(GEN,INTERVAL)

Q_GENPUMP_STATUS(GEN,INTERVAL)


Q_SU_FC_GENLIMITLOW_TRAJECTORY1(GEN,GEN,INTERVAL)
Q_SU_FC_GENLIMITLOW_TRAJECTORY2(GEN,GEN,INTERVAL)
Q_SU_FC_GENLIMITLOW_TRAJECTORY3(GEN,GEN,INTERVAL)
$offText

Q_ELECTROLYZER_RAMP_LIMIT_UP(ELECTROLYZER,INTERVAL)
Q_ELECTROLYZER_RAMP_LIMIT_DOWN(ELECTROLYZER,INTERVAL)
Q_HYDROGEN_TANK_FEED(ELECTROLYZER,INTERVAL)
Q_FUEL_CELL_SCHEDULE_TANK_START(GEN,ELECTROLYZER,INTERVAL)
Q_FUEL_CELL_SCHEDULE_TANK(GEN,ELECTROLYZER,INTERVAL)

Q_HYDROGEN_STORAGE_GENERATING_START (ELECTROLYZER,GEN,INTERVAL) DEFINES THE AMOUNT OF ENERGY STORAGE AT THE BEGINNING OF THE DAY
Q_HYDROGEN_STORAGE_GENERATING(ELECTROLYZER,GEN,INTERVAL)

Q_FORCE_FC_OFF(GEN,INTERVAL)
Q_DISABLE_FC_RESERVE(GEN,INTERVAL,RESERVETYPE)

***** Added on 27th May, 2022*** Exclusively for balancing HT_DEMAND_VAR with CONVENTIONAL_PUMP_SCHEDULE
$onText November 28,2022
Q_DISABLE_NUC_RESERVE(GEN,INTERVAL,RESERVETYPE)

Q_MIN_STABLE(GEN,INTERVAL)
*NUCLEAR NOVEL CONSTRAINTS
Q_NUCLEAR_RAMPDOWN(GEN,INTERVAL)
Q_NUCLEAR_RAMPUP(GEN,INTERVAL)
Q_NUCLEAR_STABLE_OUTPUT(GEN,INTERVAL)
*$onText 11/29/2022
Q_STABLE_COMMITMENT_HARD_HI(GEN,INTERVAL)
************--------------------------------------------------------------------
Q_UNIVERSAL_NUCLEAR_SCHEDULE_UP(GEN,INTERVAL)
Q_UNIVERSAL_NUCLEAR_SCHEDULE_DN(GEN,INTERVAL)
*-------------------------------------------------------------------------------
*Q_INITIAL_NUCLEAR_SCHEDULE(GEN,INTERVAL)
****************10/12/2022------------------------------------------------------
Q_MIN_STABLE_INITIAL_UP(GEN,INTERVAL)
Q_MIN_STABLE_INITIAL_DN(GEN,INTERVAL)
Q_MIN_STABLE_FIRST_HOUR(GEN,INTERVAL)
Q_NUCLEAR_RAMPDOWN_INITIAL(GEN,INTERVAL)
Q_NUCLEAR_RAMPUP_INITIAL(GEN,INTERVAL)
Q_INITIAL_NUCLEAR_SCHEDULE_UP(GEN,INTERVAL)
Q_INITIAL_NUCLEAR_SCHEDULE_DN(GEN,INTERVAL)
$offText
;


*     Define_Equations     *

Q_LOAD_BALANCE(INTERVAL)..
SUM(GEN,GEN_DELIVERY_FACTORS(GEN,INTERVAL)*(GEN_SCHEDULE(GEN,INTERVAL)-CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL)))
         =E= SUM(BUS,BUS_DELIVERY_FACTORS(BUS,INTERVAL)*LOAD(INTERVAL)*LOAD_DIST(BUS)) - LOSS_LOAD(INTERVAL) + ADDITIONAL_LOAD_SLACK(INTERVAL)  + LOSS_BIAS;

Q_GENTOTAL(AVAILABLE_GEN,INTERVAL)..
GEN_SCHEDULE(AVAILABLE_GEN,INTERVAL) =E= SUM(GENBLOCK(G,BLOCK)$(SAMEAS(AVAILABLE_GEN,G)),GEN_BLOCK_SCHEDULE(G,BLOCK,INTERVAL))
;

Q_GEN_BLOCK_LIMIT1(GENBLOCK(AVAILABLE_GEN,BLOCK),INTERVAL)$(ORD(BLOCK) EQ 1)..
GEN_BLOCK_SCHEDULE(AVAILABLE_GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(AVAILABLE_GEN,BLOCK)
;

Q_GEN_BLOCK_LIMIT2(GENBLOCK(AVAILABLE_GEN,BLOCK),INTERVAL)$(ORD(BLOCK) GT 1)..
GEN_BLOCK_SCHEDULE(AVAILABLE_GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(AVAILABLE_GEN,BLOCK) - BLOCK_CAP(AVAILABLE_GEN,BLOCK-1)
;

Q_GENLIMIT_HIGH(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) =L= GENVALUE(GEN,"CAPACITY")*UNIT_STATUS(GEN,INTERVAL);
;
*$onText
Q_GENLIMIT_HIGH2(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)) =L= UNIT_STATUS(GEN,INTERVAL)*GENVALUE(GEN,"CAPACITY") + PUMPING(GEN,INTERVAL)*STORAGEVALUE(GEN,"MAX_PUMP")
;
*$offText
$onText
Q_GENLIMIT_HIGH2(NONUC_GEN,INTERVAL)..
GEN_SCHEDULE(NONUC_GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE)) =L= UNIT_STATUS(NONUC_GEN,INTERVAL)*GENVALUE(NONUC_GEN,"CAPACITY") + PUMPING(NONUC_GEN,INTERVAL)*STORAGEVALUE(NONUC_GEN,"MAX_PUMP")
;
$offText
** There is nothing to do with nuclear here
Q_VARIABLE_FORECAST(VARIABLE_CAPACITY_RESOURCE,INTERVAL)..
GEN_SCHEDULE(VARIABLE_CAPACITY_RESOURCE,INTERVAL) =L= VG_FORECAST(INTERVAL,VARIABLE_CAPACITY_RESOURCE) + GENVALUE(VARIABLE_CAPACITY_RESOURCE,"PERUNIT_COST")*GENVALUE(VARIABLE_CAPACITY_RESOURCE,"CAPACITY")
;
** There is nothing to do with nuclear here
Q_RAMP_RATE_UP_BASIC(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*60*INTERVAL_LENGTH*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;
** There is nothing to do with nuclear here
Q_RAMP_RATE_DOWN_BASIC(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1)
         =G= -1*GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*60*INTERVAL_LENGTH*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1) - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;

$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES NET_ENERGY(BUS,INTERVAL) =E= SUM(GENBUS(BUS,GEN),(GEN_SCHEDULE(GEN,INTERVAL)-CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL))*INJECTION_FACTOR(BUS,GEN)) +
$IFI '%NETWORK_CHECK%' == YES          HVDC_CONTRIBUTION(BUS,INTERVAL) - LOAD_DIST(BUS)*(LOAD(INTERVAL)-LOSS_LOAD(INTERVAL)+ ADDITIONAL_LOAD_SLACK(INTERVAL));
$IFI '%NETWORK_CHECK%' == YES ;

*Unnecessary because the CONVENTIONAL_PUMP_SCHEDULE takes care of it
*-(HT_DEMAND_VAR(INTERVAL))$(ORD(BUS) EQ 8)


$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW(BRANCH_AC,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH_AC,INTERVAL) =E= SUM(BUS,PTDF(BRANCH_AC,BUS)*NET_ENERGY(BUS,INTERVAL))
$IFI '%NETWORK_CHECK%' == YES          + SUM(PAR,PTDF_PAR(BRANCH_AC,PAR)*PHASE_SHIFTER_ANGLE(PAR,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1(BRANCH,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH,INTERVAL) =L= BRANCHDATA(BRANCH,"LINE_RATING") + BRANCH_SLACK1(BRANCH,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2(BRANCH,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH,INTERVAL) =G= -1*BRANCHDATA(BRANCH,"LINE_RATING") -BRANCH_SLACK2(BRANCH,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

Q_RESERVE_TOTAL(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE) =E= SUM(GEN,GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE))
         + SUM(R$(ORD(R) EQ RESERVEVALUE(RESERVETYPE,"RESERVE_INCLUSIVE")),TOTAL_RESERVE(INTERVAL,R))
;

Q_RESERVE_BALANCE(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE)         + INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
         =G= RESERVELEVEL(INTERVAL,RESERVETYPE)
;

Q_RESERVE_BALANCE2(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE)         + INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
         =L= RESERVELEVEL(INTERVAL,RESERVETYPE)*10000
;
*$offText
Q_RESERVE_CAPABILITY(GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L=
         (UNIT_STATUS(GEN,INTERVAL) + PUMPING(GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 RESERVEVALUE(RESERVETYPE,"RESERVE_AGC")*GENVALUE(GEN,"AGC_QUALIFIED")
         + (UNIT_STATUS(GEN,INTERVAL) + PUMPING(GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 (1-RESERVEVALUE(RESERVETYPE,"RESERVE_AGC"))
         + (1 - UNIT_STATUS(GEN,INTERVAL) - PUMPING(GEN,INTERVAL)) * (1 - RESERVEVALUE(RESERVETYPE,"RESERVE_ON")) * QSC(GEN,RESERVETYPE)
;

$onText
Q_RESERVE_CAPABILITY(NONUC_GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE) =L=
         (UNIT_STATUS(NONUC_GEN,INTERVAL) + PUMPING(NONUC_GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(NONUC_GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 RESERVEVALUE(RESERVETYPE,"RESERVE_AGC")*GENVALUE(NONUC_GEN,"AGC_QUALIFIED")
         + (UNIT_STATUS(NONUC_GEN,INTERVAL) + PUMPING(NONUC_GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(NONUC_GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 (1-RESERVEVALUE(RESERVETYPE,"RESERVE_AGC"))
         + (1 - UNIT_STATUS(NONUC_GEN,INTERVAL) - PUMPING(NONUC_GEN,INTERVAL)) * (1 - RESERVEVALUE(RESERVETYPE,"RESERVE_ON")) * QSC(NONUC_GEN,RESERVETYPE)
;
$offText
*$onText
Q_RESERVE_RAMPUP_LIMIT(GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(GEN,INTERVAL)*GENVALUE(GEN,"RAMP_RATE") + PUMPING(GEN,INTERVAL)*STORAGEVALUE(GEN,"PUMP_RAMP_RATE")
;
*$offText
$onText
Q_RESERVE_RAMPUP_LIMIT(NONUC_GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(NONUC_GEN,INTERVAL)*GENVALUE(NONUC_GEN,"RAMP_RATE") + PUMPING(NONUC_GEN,INTERVAL)*STORAGEVALUE(NONUC_GEN,"PUMP_RAMP_RATE")
;
$offText
*$onText
Q_RESERVE_RAMPDOWN_LIMIT(GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(GEN,INTERVAL)*GENVALUE(GEN,"RAMP_RATE") + PUMPING(GEN,INTERVAL)*STORAGEVALUE(GEN,"PUMP_RAMP_RATE")
;
*$offText
$onText
Q_RESERVE_RAMPDOWN_LIMIT(NONUC_GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(NONUC_GEN,INTERVAL)*GENVALUE(NONUC_GEN,"RAMP_RATE") + PUMPING(NONUC_GEN,INTERVAL)*STORAGEVALUE(NONUC_GEN,"PUMP_RAMP_RATE")
;
$offText
* These equations have nothing to do with nuclear
Q_RESERVE_CAPABILITY_VG(VARIABLE_GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(VARIABLE_GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(VARIABLE_GEN,"CAPACITY")*RESERVEVALUE(RESERVETYPE,"RESERVE_VG")
;

Q_VARIABLE_RESERVE_CAPACITY(VARIABLE_GEN,INTERVAL)..
GEN_SCHEDULE(VARIABLE_GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(VARIABLE_GEN,INTERVAL,RESERVETYPE)) =L= VG_FORECAST(INTERVAL,VARIABLE_GEN)
;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC(CTGC_BRANCH,BRANCH_AC,INTERVAL)$(DIAG(BRANCH_AC,CTGC_BRANCH) EQ 0)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH_AC,INTERVAL) =E= LINEFLOW(BRANCH_AC,INTERVAL) + LODF(CTGC_BRANCH,BRANCH_AC)*LINEFLOW(CTGC_BRANCH,INTERVAL)
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC2(CTGC_BRANCH,BRANCH,INTERVAL)$(SAMEAS(BRANCH,CTGC_BRANCH) )..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =E= 0
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC(CTGC_BRANCH,PAR,INTERVAL)$(SAMEAS(PAR,CTGC_BRANCH))..
$IFI '%CONTINGENCY_CHECK%' == YES PHASE_SHIFTER_ANGLE_CTGC(CTGC_BRANCH,PAR,INTERVAL) =E= 0
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC2(CTGC_BRANCH,PAR,INTERVAL)$(DIAG(PAR,CTGC_BRANCH) EQ 0)..
$IFI '%CONTINGENCY_CHECK%' == YES PHASE_SHIFTER_ANGLE_CTGC(CTGC_BRANCH,PAR,INTERVAL) =E= PHASE_SHIFTER_ANGLE(PAR,INTERVAL)
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_HVDC_CTGC(CTGC_BRANCH,BUS,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES HVDC_CONTRIBUTION_OFFSET_CTGC(CTGC_BRANCH,BUS,INTERVAL) =E= SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS3) AND SAMEAS(CTGC_BRANCH,HVDC)), -1*LINEFLOW(HVDC,INTERVAL) )
$IFI '%CONTINGENCY_CHECK%' == YES          + SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS4)AND SAMEAS(CTGC_BRANCH,HVDC)),LINEFLOW(HVDC,INTERVAL) )
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC(CTGC_BRANCH,BRANCH,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =L= BRANCHDATA(BRANCH,"STE_RATING")
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC(CTGC_BRANCH,BRANCH,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =G= -1*BRANCHDATA(BRANCH,"STE_RATING")
$IFI '%CONTINGENCY_CHECK%' == YES ;
$onText
Q_MIN_RUN_TIME(MIN_RUN_GEN(GEN,INTERVAL))$(ORD(INTERVAL) LE CARD(INTERVAL) - GENVALUE(GEN,"MIN_RUN_TIME")*(1/INTERVAL_LENGTH) + 1)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + (1/INTERVAL_LENGTH)*GENVALUE(GEN,"MIN_RUN_TIME")-1))  ) ),UNIT_STATUS(GEN,H) )
         =G= GENVALUE(GEN,"MIN_RUN_TIME")*UNIT_STARTUP(GEN,INTERVAL)*(1/INTERVAL_LENGTH)*(1-GEN_FORCED_OUT(GEN))
;
$offText

Q_MIN_RUN_TIME(MIN_RUN_GEN(NONUC_GEN,INTERVAL))$(ORD(INTERVAL) LE CARD(INTERVAL) - GENVALUE(NONUC_GEN,"MIN_RUN_TIME")*(1/INTERVAL_LENGTH) + 1)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + (1/INTERVAL_LENGTH)*GENVALUE(NONUC_GEN,"MIN_RUN_TIME")-1))  ) ),UNIT_STATUS(NONUC_GEN,H) )
         =G= GENVALUE(NONUC_GEN,"MIN_RUN_TIME")*UNIT_STARTUP(NONUC_GEN,INTERVAL)*(1/INTERVAL_LENGTH)*(1-GEN_FORCED_OUT(NONUC_GEN))
;
$onText
Q_MIN_RUN_TIME2(MIN_RUN_GEN(GEN,INTERVAL))$(ORD(INTERVAL) GE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(GEN,"MIN_RUN_TIME") + 2)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE CARD(INTERVAL)  ) ),UNIT_STATUS(GEN,H) )
         =G= (CARD(INTERVAL) - ORD(INTERVAL)+1)*UNIT_STARTUP(GEN,INTERVAL)
;
$offText
Q_MIN_RUN_TIME2(MIN_RUN_GEN(NONUC_GEN,INTERVAL))$(ORD(INTERVAL) GE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(NONUC_GEN,"MIN_RUN_TIME") + 2)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE CARD(INTERVAL)  ) ),UNIT_STATUS(NONUC_GEN,H) )
         =G= (CARD(INTERVAL) - ORD(INTERVAL)+1)*UNIT_STARTUP(NONUC_GEN,INTERVAL)
;
$onText
Q_MIN_DOWN_TIME(MIN_DOWN_GEN(GEN,INTERVAL))$(ORD(INTERVAL) LE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(GEN,"MIN_DOWN_TIME") + 1)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + (1/INTERVAL_LENGTH)*GENVALUE(GEN,"MIN_DOWN_TIME")-1) ) ) ),UNIT_STATUS(GEN,H) + PUMPING(GEN,H))
         =L= GENVALUE(GEN,"MIN_DOWN_TIME")*(1/INTERVAL_LENGTH)*(1 -UNIT_SHUTDOWN(GEN,INTERVAL) - UNIT_PUMPDOWN(GEN,INTERVAL))
;
$offText

Q_MIN_DOWN_TIME(MIN_DOWN_GEN(NONUC_GEN,INTERVAL))$(ORD(INTERVAL) LE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(NONUC_GEN,"MIN_DOWN_TIME") + 1)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE (MAX(ORD(INTERVAL),ORD(INTERVAL) + (1/INTERVAL_LENGTH)*GENVALUE(NONUC_GEN,"MIN_DOWN_TIME")-1) ) ) ),UNIT_STATUS(NONUC_GEN,H) + PUMPING(NONUC_GEN,H))
         =L= GENVALUE(NONUC_GEN,"MIN_DOWN_TIME")*(1/INTERVAL_LENGTH)*(1 -UNIT_SHUTDOWN(NONUC_GEN,INTERVAL) - UNIT_PUMPDOWN(NONUC_GEN,INTERVAL))
;


$onText
Q_MIN_DOWN_TIME2(MIN_DOWN_GEN(GEN,INTERVAL))$(ORD(INTERVAL) GE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(GEN,"MIN_DOWN_TIME") + 2)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE CARD(INTERVAL)  ) ),UNIT_STATUS(GEN,H) + PUMPING(GEN,H))
         =L= (CARD(INTERVAL) - ORD(INTERVAL) + 1)*(1 -UNIT_SHUTDOWN(GEN,INTERVAL) - UNIT_PUMPDOWN(GEN,INTERVAL))
;
$offText
Q_MIN_DOWN_TIME2(MIN_DOWN_GEN(NONUC_GEN,INTERVAL))$(ORD(INTERVAL) GE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*GENVALUE(NONUC_GEN,"MIN_DOWN_TIME") + 2)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE CARD(INTERVAL)  ) ),UNIT_STATUS(NONUC_GEN,H) + PUMPING(NONUC_GEN,H))
         =L= (CARD(INTERVAL) - ORD(INTERVAL) + 1)*(1 -UNIT_SHUTDOWN(NONUC_GEN,INTERVAL) - UNIT_PUMPDOWN(NONUC_GEN,INTERVAL))
;

$onText
Q_COMMITMENT_HARD_HI(GEN,INTERVAL)..
UNIT_STATUS(GEN,INTERVAL) =G= UNIT_STATUS_ENFORCED_ON(GEN,INTERVAL)
;
$offText

Q_COMMITMENT_HARD_HI(NONUC_GEN,INTERVAL)..
UNIT_STATUS(NONUC_GEN,INTERVAL) =G= UNIT_STATUS_ENFORCED_ON(NONUC_GEN,INTERVAL)
;
$onText
Q_COMMITMENT_HARD_LO(GEN,INTERVAL)..
UNIT_STATUS(GEN,INTERVAL) =L= UNIT_STATUS_ENFORCED_OFF(GEN,INTERVAL)
;
$offText

Q_COMMITMENT_HARD_LO(NONUC_GEN,INTERVAL)..
UNIT_STATUS(NONUC_GEN,INTERVAL) =L= UNIT_STATUS_ENFORCED_OFF(NONUC_GEN,INTERVAL)
;
$onText
Q_STARTUP(MIN_GEN_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
UNIT_STARTUP(MIN_GEN_GEN,INTERVAL) - UNIT_SHUTDOWN(MIN_GEN_GEN,INTERVAL) =E= UNIT_STATUS(MIN_GEN_GEN,INTERVAL) - UNIT_STATUS(MIN_GEN_GEN,INTERVAL-1)
;
$offText

Q_STARTUP(MIN_GEN_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT 1)..
UNIT_STARTUP(MIN_GEN_GEN_NONUC,INTERVAL) - UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,INTERVAL) =E= UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL) - UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL-1)
;
$onText
Q_STARTUP3(MIN_GEN_GEN,INTERVAL)..
UNIT_STARTUP(MIN_GEN_GEN,INTERVAL) + UNIT_SHUTDOWN(MIN_GEN_GEN,INTERVAL) =L= 1
;
$offText

Q_STARTUP3(MIN_GEN_GEN_NONUC,INTERVAL)..
UNIT_STARTUP(MIN_GEN_GEN_NONUC,INTERVAL) + UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,INTERVAL) =L= 1
;


$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE1(ADJUSTABLE_PAR,INTERVAL) =L= -1*BRANCHDATA(ADJUSTABLE_PAR,"PHASE_SHIFTER_ANGLE_LOW") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE2(ADJUSTABLE_PAR,INTERVAL) =L= BRANCHDATA(ADJUSTABLE_PAR,"PHASE_SHIFTER_ANGLE_HIGH") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(ADJUSTABLE_PAR,INTERVAL) =E= -1*PHASE_SHIFTER_ANGLE1(ADJUSTABLE_PAR,INTERVAL) + PHASE_SHIFTER_ANGLE2(ADJUSTABLE_PAR,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4(FIXED_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(FIXED_PAR,INTERVAL) =L= BRANCHDATA(FIXED_PAR,"PHASE_SHIFTER_ANGLE_HIGH") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5(FIXED_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(FIXED_PAR,INTERVAL) =G= BRANCHDATA(FIXED_PAR,"PHASE_SHIFTER_ANGLE_LOW") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_CONTRIBUTION(BUS,INTERVAL) =E= SUM(BRANCHBUS(PAR,BUS3,BUS4)$(SAMEAS(BUS,BUS3)),PHASE_SHIFTER_ANGLE(PAR,INTERVAL)/(BRANCHDATA(PAR,"REACTANCE")))
$IFI '%NETWORK_CHECK%' == YES          - SUM(BRANCHBUS(PAR,BUS3,BUS4)$(SAMEAS(BUS,BUS4)),PHASE_SHIFTER_ANGLE(PAR,INTERVAL)/(BRANCHDATA(PAR,"REACTANCE")));
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_HVDC(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES HVDC_CONTRIBUTION(BUS,INTERVAL) =E= SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS3)), -1*LINEFLOW(HVDC,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES          + SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS4)),LINEFLOW(HVDC,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES ;
$onText
Q_SU_GENLIMITLOW_TRAJECTORY1(MIN_GEN_GEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - SHUTDOWN_PERIOD(MIN_GEN_GEN) AND (ORD(INTERVAL) GE STARTUP_PERIOD(MIN_GEN_GEN)-INTERVALS_STARTED_AGO(MIN_GEN_GEN)))..
GEN_SCHEDULE(MIN_GEN_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN)-1)),UNIT_SHUTDOWN(MIN_GEN_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN)+1 )),UNIT_STARTUP(MIN_GEN_GEN,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_STARTUP(MIN_GEN_GEN,H))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN)-1)),
         (ORD(H)-ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")*UNIT_SHUTDOWN(MIN_GEN_GEN,H))*MIN(1,(INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN,"MAX_PUMP")
;
$offText

Q_SU_GENLIMITLOW_TRAJECTORY1(MIN_GEN_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC) AND (ORD(INTERVAL) GE STARTUP_PERIOD(MIN_GEN_GEN_NONUC)-INTERVALS_STARTED_AGO(MIN_GEN_GEN_NONUC)))..
GEN_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC)-1)),UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC)+1 )),UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC)-1)),
         (ORD(H)-ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))*MIN(1,(INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN_NONUC,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN_NONUC,"MAX_PUMP")
;


$onText
Q_SU_GENLIMITLOW_TRAJECTORY2(MIN_GEN_GEN,INTERVAL)$(ORD(INTERVAL) LT  STARTUP_PERIOD(MIN_GEN_GEN)-INTERVALS_STARTED_AGO(MIN_GEN_GEN))..
GEN_SCHEDULE(MIN_GEN_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN)-1)),UNIT_SHUTDOWN(MIN_GEN_GEN,H))
         - PREVIOUS_UNIT_STARTUP(MIN_GEN_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(MIN_GEN_GEN,H))
         ) +
         (PREVIOUS_UNIT_STARTUP(MIN_GEN_GEN))*(INTERVALS_STARTED_AGO(MIN_GEN_GEN)+ ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"STARTUP_TIME")) +
         SUM(H$(ORD(H) LE ORD(INTERVAL)),
         (ORD(INTERVAL)-ORD(H)+1)*INTERVAL_LENGTH*UNIT_STARTUP(MIN_GEN_GEN,H))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")/GENVALUE(MIN_GEN_GEN,"STARTUP_TIME")
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN)-1)),
         (ORD(H)-ORD(INTERVAL))*UNIT_SHUTDOWN(MIN_GEN_GEN,H))*(GENVALUE(MIN_GEN_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN,"MAX_PUMP")
;
$offText
Q_SU_GENLIMITLOW_TRAJECTORY2(MIN_GEN_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) LT  STARTUP_PERIOD(MIN_GEN_GEN_NONUC)-INTERVALS_STARTED_AGO(MIN_GEN_GEN_NONUC))..
GEN_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC)-1)),UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))
         - PREVIOUS_UNIT_STARTUP(MIN_GEN_GEN_NONUC) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))
         ) +
         (PREVIOUS_UNIT_STARTUP(MIN_GEN_GEN_NONUC))*(INTERVALS_STARTED_AGO(MIN_GEN_GEN_NONUC)+ ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME")) +
         SUM(H$(ORD(H) LE ORD(INTERVAL)),
         (ORD(INTERVAL)-ORD(H)+1)*INTERVAL_LENGTH*UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")/GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME")
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC)-1)),
         (ORD(H)-ORD(INTERVAL))*UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))*(GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN_NONUC,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN_NONUC,"MAX_PUMP")
;

$onText
Q_SU_GENLIMITLOW_TRAJECTORY3(MIN_GEN_GEN,INTERVAL)$(ORD(INTERVAL) GT  CARD(INTERVAL) - SHUTDOWN_PERIOD(MIN_GEN_GEN) AND ORD(INTERVAL) GE STARTUP_PERIOD(MIN_GEN_GEN) - INTERVALS_STARTED_AGO(MIN_GEN_GEN))..
GEN_SCHEDULE(MIN_GEN_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(MIN_GEN_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN) + 1)),UNIT_STARTUP(MIN_GEN_GEN,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_STARTUP(MIN_GEN_GEN,H))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL) ),
         (ORD(H)-ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN,"MIN_GEN")*UNIT_SHUTDOWN(MIN_GEN_GEN,H))*MIN(1,(INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN,"MAX_PUMP")
;
$offText

Q_SU_GENLIMITLOW_TRAJECTORY3(MIN_GEN_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT  CARD(INTERVAL) - SHUTDOWN_PERIOD(MIN_GEN_GEN_NONUC) AND ORD(INTERVAL) GE STARTUP_PERIOD(MIN_GEN_GEN_NONUC) - INTERVALS_STARTED_AGO(MIN_GEN_GEN_NONUC))..
GEN_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC) + 1)),UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_STARTUP(MIN_GEN_GEN_NONUC,H))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL) ),
         (ORD(H)-ORD(INTERVAL))*GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,H))*MIN(1,(INTERVAL_LENGTH/GENVALUE(MIN_GEN_GEN_NONUC,"SHUTDOWN_TIME")))
         - PUMPING(MIN_GEN_GEN_NONUC,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN_NONUC,"MAX_PUMP")
;
$onText
Q_SU_RAMPUP_TRAJECTORY1(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) GT STARTUP_PERIOD(RAMP_LIMITED_GEN) - INTERVALS_STARTED_AGO(RAMP_LIMITED_GEN) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL) - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - STARTUP_PERIOD(RAMP_LIMITED_GEN))),UNIT_STARTUP(RAMP_LIMITED_GEN,H))
                 )
          + (SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - STARTUP_PERIOD(RAMP_LIMITED_GEN))),UNIT_STARTUP(RAMP_LIMITED_GEN,H))*
                 (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60
                 )
            )
         +RAMP_UP_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;
$offText

Q_SU_RAMPUP_TRAJECTORY1(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT STARTUP_PERIOD(RAMP_LIMITED_GEN_NONUC) - INTERVALS_STARTED_AGO(RAMP_LIMITED_GEN_NONUC) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL) - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - STARTUP_PERIOD(RAMP_LIMITED_GEN_NONUC))),UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,H))
                 )
          + (SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - STARTUP_PERIOD(RAMP_LIMITED_GEN_NONUC))),UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,H))*
                 (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60
                 )
            )
         +RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;

$onText
Q_SU_RAMPUP_TRAJECTORY2(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) LE  STARTUP_PERIOD(RAMP_LIMITED_GEN)-INTERVALS_STARTED_AGO(RAMP_LIMITED_GEN) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL) - PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(RAMP_LIMITED_GEN,H))
                 )
          + ((PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN) + SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(RAMP_LIMITED_GEN,H)))*
                 (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60
                 )
            )
         + RAMP_UP_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;
$offText
Q_SU_RAMPUP_TRAJECTORY2(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) LE  STARTUP_PERIOD(RAMP_LIMITED_GEN_NONUC)-INTERVALS_STARTED_AGO(RAMP_LIMITED_GEN_NONUC) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL) - PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,H))
                 )
          + ((PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC) + SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,H)))*
                 (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60
                 )
            )
         + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;
$onText
Q_SU_RAMPDOWN_TRAJECTORY1(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) LE (CARD(INTERVAL) - SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL)
          =L= GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL-1) - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H))
                 )
          + (SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H))*
                 (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60
                 )
             )
          + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;
$offText

Q_SU_RAMPDOWN_TRAJECTORY1(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) LE (CARD(INTERVAL) - SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL)
          =L= GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL-1) - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H))
                 )
          + (SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H))*
                 (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60
                 )
             )
          + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;
$onText
Q_SU_RAMPDOWN_TRAJECTORY2(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) GT  (CARD(INTERVAL) - SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL)
         =L= GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL-1) - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H))
                 )
         + (SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H))*
                 (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60
                 )
           )
         + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;
$offText

Q_SU_RAMPDOWN_TRAJECTORY2(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT  (CARD(INTERVAL) - SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)) AND ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL)
         =L= GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60*INTERVAL_LENGTH*
                 (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL-1) - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H))
                 )
         + (SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H))*
                 (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH - GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60
                 )
           )
         + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;
$onText
Q_SU_RESERVE_TRAJECTORY1(GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE CARD(INTERVAL) - SHUTDOWN_PERIOD(GEN) AND (ORD(INTERVAL) GE STARTUP_PERIOD(GEN)-1))..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(GEN)-1)),UNIT_SHUTDOWN(GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(GEN) + 1)),UNIT_STARTUP(GEN,H))
         )
;
$offText
Q_SU_RESERVE_TRAJECTORY1(NONUC_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE CARD(INTERVAL) - SHUTDOWN_PERIOD(NONUC_GEN) AND (ORD(INTERVAL) GE STARTUP_PERIOD(NONUC_GEN)-1))..
GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(NONUC_GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(NONUC_GEN)-1)),UNIT_SHUTDOWN(NONUC_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(NONUC_GEN) + 1)),UNIT_STARTUP(NONUC_GEN,H))
         )
;
$onText
Q_SU_RESERVE_TRAJECTORY2(GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE  STARTUP_PERIOD(GEN)-INTERVALS_STARTED_AGO(GEN))..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(GEN)-1)),UNIT_SHUTDOWN(GEN,H))
         - PREVIOUS_UNIT_STARTUP(GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(GEN,H))
         )
;
$offText
Q_SU_RESERVE_TRAJECTORY2(NONUC_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE  STARTUP_PERIOD(NONUC_GEN)-INTERVALS_STARTED_AGO(NONUC_GEN))..
GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(NONUC_GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(NONUC_GEN)-1)),UNIT_SHUTDOWN(NONUC_GEN,H))
         - PREVIOUS_UNIT_STARTUP(NONUC_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTUP(NONUC_GEN,H))
         )
;
$onText
Q_SU_RESERVE_TRAJECTORY3(GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) GT  CARD(INTERVAL) - SHUTDOWN_PERIOD(GEN))..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(GEN) + 1)),UNIT_STARTUP(GEN,H))
         )
;
$offText
Q_SU_RESERVE_TRAJECTORY3(NONUC_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) GT  CARD(INTERVAL) - SHUTDOWN_PERIOD(NONUC_GEN))..
GEN_RESERVE_SCHEDULE(NONUC_GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(NONUC_GEN,"CAPACITY")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_SHUTDOWN(NONUC_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - STARTUP_PERIOD(NONUC_GEN) + 1)),UNIT_STARTUP(NONUC_GEN,H))
         )
;
* The Pump thing starts from here
* This equation applies to the ESR and LESR
Q_PUMPMAXLIMIT(STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) =L= STORAGEVALUE(STORAGE_GEN,"MAX_PUMP")*PUMPING(STORAGE_GEN,INTERVAL)
;
$onText on 12/14/2022
Q_PUMPMINLIMIT(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL) =G= STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;
$offText

Q_PUMPMINLIMIT(ESR,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL) =G= STORAGEVALUE(ESR,"MIN_PUMP")*PUMPING(ESR,INTERVAL)
;

Q_PUMPMINLIMIT2(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL) -
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)) =G=         0
         + PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
         - UNIT_STATUS(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*GENVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"CAPACITY")
;
* We don't want any reserve from the storage generators for now; so in a later equation the reserve provision is nullified from this type of sources
Q_PUMPMAXLIMIT2(STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE))  =L=
         STORAGEVALUE(STORAGE_GEN,"MAX_PUMP")*PUMPING(STORAGE_GEN,INTERVAL) + UNIT_STATUS(STORAGE_GEN,INTERVAL)*GENVALUE(STORAGE_GEN,"CAPACITY")
;
* Multiplied by 100 to keep the things in kg
Q_STORAGE_GENERATING_START(STORAGE_GEN,"FC1",INTERVAL)$(ORD(INTERVAL) EQ 1)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =E= STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")*100
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_EFFICIENCY("FC1",INTERVAL)
         + INTERVAL_MINUTES(INTERVAL)/60*PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_GENERATING(STORAGE_GEN,"FC1",INTERVAL)$(ORD(INTERVAL) GT 1)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =E= STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_EFFICIENCY("FC1",INTERVAL)
         + INTERVAL_MINUTES(INTERVAL)/60*PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_END(STORAGE_GEN)$(STORAGEVALUE(STORAGE_GEN,"ENFORCE_FINAL_STORAGE") EQ 1)..
SUM(INTERVAL$(ORD(INTERVAL) EQ CARD(INTERVAL)),STORAGE_LEVEL(STORAGE_GEN,INTERVAL)) =E= STORAGEVALUE(STORAGE_GEN,"FINAL_STORAGE")*100 + END_STORAGE_PENALTY_PLUS(STORAGE_GEN) - END_STORAGE_PENALTY_MINUS(STORAGE_GEN)
;
* Multiplied by 100 to comply with the capacity given in kg
Q_STORAGE_MAX(STORAGE_GEN,INTERVAL)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX")*100
;

Q_STORAGE_MIN(STORAGE_GEN,INTERVAL)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =G= 0
;
*https://rmi.org/run-on-less-with-hydrogen-fuel-cells/ ** 20 before
Q_STORAGE_GEN_EFFICIENCY9("FC1",INTERVAL)..
GEN_EFFICIENCY("FC1",INTERVAL) =E= GEN_SCHEDULE("FC1",INTERVAL)*100*1000/33
;

Q_STORAGE_PUMP_EFFICIENCY9(STORAGE_GEN,INTERVAL)..
*PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL) =E= STORAGEVALUE(STORAGE_GEN,"EFFICIENCY")*CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL)
* Modified to accommodate HTSE
PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL) =E= CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL)*100*1000/55
;

Q_STORAGE_RESERVEUP1(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) GT 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
         + CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) + WASTED_STORAGE(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_RESERVEUP2(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) EQ 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")
         + CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) + WASTED_STORAGE(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_RESERVEDOWN1(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) GT 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX") - STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
;

Q_STORAGE_RESERVEDOWN2(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) EQ 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX") - STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")
;

Q_PUMP_HARD_HI(STORAGE_GEN,INTERVAL)..
PUMPING(STORAGE_GEN,INTERVAL) =G= PUMPING_ENFORCED_ON(STORAGE_GEN,INTERVAL)
;

Q_PUMP_HARD_LO(STORAGE_GEN,INTERVAL)..
PUMPING(STORAGE_GEN,INTERVAL) =L= PUMPING_ENFORCED_OFF(STORAGE_GEN,INTERVAL)
;

Q_MIN_PUMP_TIME(CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_PUMP_TIME")*(1/INTERVAL_LENGTH) + 1)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE (ORD(INTERVAL) + (1/INTERVAL_LENGTH)*GENVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_RUN_TIME")-1)  ) ),
         PUMPING(CONVENTIONAL_STORAGE_GEN,H) )
         =G= STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_PUMP_TIME")*UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,INTERVAL)*(1/INTERVAL_LENGTH)*
         (1-GEN_FORCED_OUT(CONVENTIONAL_STORAGE_GEN))
;

Q_MIN_PUMP_TIME2(CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GE CARD(INTERVAL) - (1/INTERVAL_LENGTH)*STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_RUN_TIME") + 2)..
SUM(H$( (ORD(H) GE (ORD(INTERVAL) ) ) AND (ORD(H) LE CARD(INTERVAL)  ) ),PUMPING(CONVENTIONAL_STORAGE_GEN,H) )
         =G= (CARD(INTERVAL) - ORD(INTERVAL)+1)*UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,INTERVAL)
;
$onText
Q_GENPUMP(STORAGE_GEN,INTERVAL)..
PUMPING(STORAGE_GEN,INTERVAL) + UNIT_STATUS(STORAGE_GEN,INTERVAL)=L= 1
;
$offText
*** Modified on 05/25/2022; replaced E with L; On 12/12/2022 modified "L" back to "E" *****************************************************
Q_GENPUMP(ESR,INTERVAL)..
PUMPING(ESR,INTERVAL) =E= 1
;


********************************************************************************
Q_PUMPUP(STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
UNIT_PUMPUP(STORAGE_GEN,INTERVAL) - UNIT_PUMPDOWN(STORAGE_GEN,INTERVAL)
         =E= PUMPING(STORAGE_GEN,INTERVAL) - PUMPING(STORAGE_GEN,INTERVAL-1)
;

Q_PUMPUP3(STORAGE_GEN,INTERVAL)..
UNIT_PUMPUP(STORAGE_GEN,INTERVAL) + UNIT_PUMPDOWN(STORAGE_GEN,INTERVAL) =L= 1
;

Q_SU_PUMP_RAMPUP_TRAJECTORY1(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT PUMPUP_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) AND ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)
         =L= STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60*INTERVAL_LENGTH*
                 (PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
                 - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - PUMPUP_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))),
                         UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H))
                 )
          + (SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GT (ORD(INTERVAL) - PUMPUP_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))),
         UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H))*
                 (STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60
                 )
            )
         + RAMP_UP_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_SU_PUMP_RAMPUP_TRAJECTORY2(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) LE  PUMPUP_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) AND ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)
         =L= STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60*INTERVAL_LENGTH*
                 (PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
                 - PREVIOUS_UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H))
                 )
         + ((PREVIOUS_UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) + SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H)))*
                 (STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
                 + MAX(0,INTERVAL_LENGTH - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60*INTERVAL_LENGTH
                 )
            )
         + RAMP_UP_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_SU_PUMP_RAMPDOWN_TRAJECTORY1(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) LE (CARD(INTERVAL) - PUMPDOWN_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)) AND ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
          =L= STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60*INTERVAL_LENGTH*(PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)
          - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)-1))),UNIT_PUMPDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H)))
          + SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)-1))),UNIT_PUMPDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H))*
                 (STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH-STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
                 )
          + RAMP_DOWN_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_SU_PUMP_RAMPDOWN_TRAJECTORY2(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT  (CARD(INTERVAL) - PUMPDOWN_PERIOD(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)) AND ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         =L= STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60*INTERVAL_LENGTH*
                 (PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)- SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H)))
         + (SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,H))*
                 (STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))
                 + MAX(0,INTERVAL_LENGTH - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*60
                 )
           )
         + RAMP_DOWN_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;
* Modified on May 25 , 2022
$onText
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY1(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN) AND (ORD(INTERVAL) GE PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-INTERVALS_PUMPUP_AGO(MIN_GEN_CONVENTIONAL_STORAGE_GEN)))..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*(PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-1)),UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)+1 )),UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*
         MIN(1,INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-1)),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*GENVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"CAPACITY")
;
$offText

*Modified on May 25 ,2022
$onText
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY2(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) LT  PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-INTERVALS_PUMPUP_AGO(MIN_GEN_CONVENTIONAL_STORAGE_GEN))..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*(PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-1)),UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         - PREVIOUS_UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         ) +
         (PREVIOUS_UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN))*(INTERVALS_PUMPUP_AGO(MIN_GEN_CONVENTIONAL_STORAGE_GEN)+ ORD(INTERVAL))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME")) +
         SUM(H$(ORD(H) LE ORD(INTERVAL)),
         (ORD(INTERVAL)-ORD(H)+1)*INTERVAL_LENGTH*UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME")
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)-1)),
         (ORD(H)-ORD(INTERVAL))*UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*(STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*GENVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"CAPACITY")
;
$offText

* Modified on 05/25/2022 *******************************************************
$onText
Q_SU_PUMP_GENLIMITLOW_TRAJECTORY3(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT  CARD(INTERVAL) - PUMPDOWN_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN) AND ORD(INTERVAL) GE PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN) - INTERVALS_PUMPUP_AGO(MIN_GEN_CONVENTIONAL_STORAGE_GEN))..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*(PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN) + 1)),UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(MIN_GEN_CONVENTIONAL_STORAGE_GEN)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL) ),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*UNIT_PUMPDOWN(MIN_GEN_CONVENTIONAL_STORAGE_GEN,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*GENVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"CAPACITY")
;
$offText

$onText
Q_SU_PUMP_RESERVE_TRAJECTORY1(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE CARD(INTERVAL) - PUMPDOWN_PERIOD(CONVENTIONAL_STORAGE_GEN) AND (ORD(INTERVAL) GE PUMPUP_PERIOD(CONVENTIONAL_STORAGE_GEN))-1)..
GEN_RESERVE_SCHEDULE(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(CONVENTIONAL_STORAGE_GEN)-1)),UNIT_PUMPDOWN(CONVENTIONAL_STORAGE_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(CONVENTIONAL_STORAGE_GEN) + 1)),UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,H))
         )
;


Q_SU_PUMP_RESERVE_TRAJECTORY2(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LT  PUMPUP_PERIOD(CONVENTIONAL_STORAGE_GEN)-1)..
GEN_RESERVE_SCHEDULE(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(CONVENTIONAL_STORAGE_GEN)-1)),UNIT_PUMPDOWN(CONVENTIONAL_STORAGE_GEN,H))
         - PREVIOUS_UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,H))
         )
;
$offText

$onText
Q_SU_PUMP_RESERVE_TRAJECTORY3(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) GT  CARD(INTERVAL) - PUMPDOWN_PERIOD(CONVENTIONAL_STORAGE_GEN))..
GEN_RESERVE_SCHEDULE(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(CONVENTIONAL_STORAGE_GEN,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(CONVENTIONAL_STORAGE_GEN) + 1)),UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,H))
         )
;
$offText
********************************************************************************
OBJECTIVE..
PRODCOST =E= SUM(INTERVAL, PRODCOST_BY_INTERVAL(INTERVAL))
;
* Now I will modify this equation ****************************

*OBJECTIVEB(INTERVAL)..
*PRODCOST_BY_INTERVAL(INTERVAL) =E=
*                         SUM(GEN,
*                         SUM(GENBLOCK(GEN,BLOCK),BLOCK_COST(GEN,BLOCK)*GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
*                         + UNIT_STATUS(GEN,INTERVAL)*INTERVAL_MINUTES(INTERVAL)/60*GENVALUE(GEN,"NO_LOAD_COST")
*                         + STARTUP_COST(GEN,INTERVAL)
*                         + SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(GEN,RESERVETYPE)*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
*                )
*                 + LOSS_LOAD(INTERVAL)*SYSTEMVALUE("VOLL")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT") + ADDITIONAL_LOAD_SLACK(INTERVAL)*SYSTEMVALUE("VOLL")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT")
*                 + SUM(RESERVETYPE,INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)*RESERVEVALUE(RESERVETYPE,"VOIR")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
*$IFI '%NETWORK_CHECK%' == YES                  + SUM(BRANCH, PHASE_SHIFTER_ANGLE1(BRANCH,INTERVAL)*.005 + PHASE_SHIFTER_ANGLE2(BRANCH,INTERVAL)*.005)
*$IFI '%NETWORK_CHECK%' == YES                  + SUM(BRANCH,(BRANCH_SLACK1(BRANCH,INTERVAL)+BRANCH_SLACK2(BRANCH,INTERVAL))*SYSTEMVALUE("VOLL")*INTERVAL_LENGTH*SYSTEMVALUE("MVA_PERUNIT"))
*;

* $16 is the price of Hydrogen per kg
OBJECTIVEB(INTERVAL)..
PRODCOST_BY_INTERVAL(INTERVAL) =E=
                         SUM(GEN,
                         SUM(GENBLOCK(GEN,BLOCK),BLOCK_COST(GEN,BLOCK)*GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
                         + UNIT_STATUS(GEN,INTERVAL)*INTERVAL_MINUTES(INTERVAL)/60*GENVALUE(GEN,"NO_LOAD_COST")
                         + STARTUP_COST(GEN,INTERVAL))
                         + SUM(ACTIVE_GEN,SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(ACTIVE_GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(ACTIVE_GEN,RESERVETYPE)*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
                )+
                SUM(HES_GEN,
                         SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(HES_GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(HES_GEN,RESERVETYPE)*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
                )-(SUM(STORAGE_GEN,PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL))*16)
                 + LOSS_LOAD(INTERVAL)*SYSTEMVALUE("VOLL")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT") + ADDITIONAL_LOAD_SLACK(INTERVAL)*SYSTEMVALUE("VOLL")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT")
                 + SUM(RESERVETYPE,INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)*RESERVEVALUE(RESERVETYPE,"VOIR")*INTERVAL_MINUTES(INTERVAL)/60*SYSTEMVALUE("MVA_PERUNIT"))
$IFI '%NETWORK_CHECK%' == YES                  + SUM(BRANCH, PHASE_SHIFTER_ANGLE1(BRANCH,INTERVAL)*.005 + PHASE_SHIFTER_ANGLE2(BRANCH,INTERVAL)*.005)
$IFI '%NETWORK_CHECK%' == YES                  + SUM(BRANCH,(BRANCH_SLACK1(BRANCH,INTERVAL)+BRANCH_SLACK2(BRANCH,INTERVAL))*SYSTEMVALUE("VOLL")*INTERVAL_LENGTH*SYSTEMVALUE("MVA_PERUNIT"))
;
************************************************************
$onText
Q_SU_RAMPUP_TRAJECTORY0(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - GENVALUE(RAMP_LIMITED_GEN,"INITIAL_MW") =L= 60*INTERVAL_LENGTH*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*
         (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL) - (PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN) + UNIT_STARTUP(RAMP_LIMITED_GEN,INTERVAL))) +
         (PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN) + UNIT_STARTUP(RAMP_LIMITED_GEN,INTERVAL))*INTERVAL_LENGTH*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME")
;
$offText
Q_SU_RAMPUP_TRAJECTORY0(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - GENVALUE(RAMP_LIMITED_GEN_NONUC,"INITIAL_MW") =L= 60*INTERVAL_LENGTH*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*
         (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL) - (PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC) + UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))) +
         (PREVIOUS_UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC) + UNIT_STARTUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))*INTERVAL_LENGTH*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME")
;
$onText
Q_SU_RAMPDOWN_TRAJECTORY0(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GENVALUE(RAMP_LIMITED_GEN,"INITIAL_MW") - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL)
          =L= GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(GENVALUE(RAMP_LIMITED_GEN,"INITIAL_STATUS")
          - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H)))
          + (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*(INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))
          *SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN,H)))
          + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;
$offText
Q_SU_RAMPDOWN_TRAJECTORY0(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GENVALUE(RAMP_LIMITED_GEN_NONUC,"INITIAL_MW") - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL)
          =L= GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*60*INTERVAL_LENGTH*(GENVALUE(RAMP_LIMITED_GEN_NONUC,"INITIAL_STATUS")
          - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H)))
          + (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*(INTERVAL_LENGTH/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))
          *SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + SHUTDOWN_PERIOD(RAMP_LIMITED_GEN_NONUC)-1))),UNIT_SHUTDOWN(RAMP_LIMITED_GEN_NONUC,H)))
          + RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;
$onText
Q_STARTUP2(MIN_GEN_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
UNIT_STARTUP(MIN_GEN_GEN,INTERVAL) - UNIT_SHUTDOWN(MIN_GEN_GEN,INTERVAL) =E= UNIT_STATUS(MIN_GEN_GEN,INTERVAL) - GENVALUE(MIN_GEN_GEN,"INITIAL_STATUS")
;
$offText
Q_STARTUP2(MIN_GEN_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
UNIT_STARTUP(MIN_GEN_GEN_NONUC,INTERVAL) - UNIT_SHUTDOWN(MIN_GEN_GEN_NONUC,INTERVAL) =E= UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL) - GENVALUE(MIN_GEN_GEN_NONUC,"INITIAL_STATUS")
;
* This constraint has nothing to do with the nuclear plant
Q_RAMP_RATE_UP_BASIC0(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"INITIAL_MW")
         =L= GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*60*INTERVAL_LENGTH*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;
*This constraint has nothing to do with the nuclear plant
Q_RAMP_RATE_DOWN_BASIC0(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"INITIAL_MW")
         =G= -1*GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*60*INTERVAL_LENGTH*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1) - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;
*$onText
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY0(ESR,INTERVAL)$(ORD(INTERVAL) EQ 1)..
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL) - STORAGEVALUE(ESR,"INITIAL_PUMP_MW")
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES           =L= INTERVAL_LENGTH*60*STORAGEVALUE(ESR,"PUMP_RAMP_RATE")*
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          (PUMPING(ESR,INTERVAL) - (PREVIOUS_UNIT_PUMPUP(ESR)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES           + UNIT_PUMPUP(ESR,INTERVAL))) +
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          (PREVIOUS_UNIT_PUMPUP(ESR) + UNIT_PUMPUP(ESR,INTERVAL))*
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES           INTERVAL_LENGTH*STORAGEVALUE(ESR,"MIN_PUMP")/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME")
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES ;

$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY0(ESR,INTERVAL)$(ORD(INTERVAL) EQ 1)..
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES STORAGEVALUE(ESR,"INITIAL_PUMP_MW") - CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES           =L= INTERVAL_LENGTH*60*STORAGEVALUE(ESR,"PUMP_RAMP_RATE")*
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          (STORAGEVALUE(ESR,"INITIAL_PUMP_STATUS")
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          - SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1))),UNIT_PUMPDOWN(ESR,H)))
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          - (SUM(H$(ORD(H) GE ORD(INTERVAL) AND (ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1))),UNIT_PUMPDOWN(ESR,H))*
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          STORAGEVALUE(ESR,"MIN_PUMP")*(INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES          - GEN_FORCED_OUT(ESR)*STORAGEVALUE(ESR,"MAX_PUMP")
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES ;
*$offText

$onText
Q_PUMPUP2(CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
UNIT_PUMPUP(CONVENTIONAL_STORAGE_GEN,INTERVAL) - UNIT_PUMPDOWN(CONVENTIONAL_STORAGE_GEN,INTERVAL)
         =E= PUMPING(CONVENTIONAL_STORAGE_GEN,INTERVAL) - STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"INITIAL_PUMP_STATUS")
;
$offText

Q_HOURS_OFFLINE1(VARIABLE_START_GEN,INTERVAL)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) + MAX_OFFLINE_TIME(VARIABLE_START_GEN)*UNIT_STATUS(VARIABLE_START_GEN,INTERVAL)
         =L= MAX_OFFLINE_TIME(VARIABLE_START_GEN)
;

Q_HOURS_OFFLINE2(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) - GENVALUE(VARIABLE_START_GEN,"INITIAL_HOUR")*(1 - GENVALUE(VARIABLE_START_GEN,"INITIAL_STATUS"))
         + (1 + MAX_OFFLINE_TIME(VARIABLE_START_GEN))*UNIT_STATUS(VARIABLE_START_GEN,INTERVAL) =G= INTERVAL_LENGTH;
;

Q_HOURS_OFFLINE3(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) - HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL -1)
         + (1 + MAX_OFFLINE_TIME(VARIABLE_START_GEN))*UNIT_STATUS(VARIABLE_START_GEN,INTERVAL) =G= INTERVAL_LENGTH;
;

Q_HOURS_OFFLINE4(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) - GENVALUE(VARIABLE_START_GEN,"INITIAL_HOUR")*(1 - GENVALUE(VARIABLE_START_GEN,"INITIAL_STATUS")) =L= INTERVAL_LENGTH;
;

Q_HOURS_OFFLINE5(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) - HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL -1) =L= INTERVAL_LENGTH;
;

Q_HOURS_OFFLINE6(VARIABLE_START_GEN,INTERVAL)..
HOUR_OFFLINE(VARIABLE_START_GEN,INTERVAL) =E= SUM(STARTUP_TYPE,OFFLINE_BLOCK(VARIABLE_START_GEN,STARTUP_TYPE)*STARTUP_BLOCK_STATUS(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE)
         + OFFLINE_HOUR_SLACK(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE))
;

Q_HOURS_OFFLINE7(VARIABLE_START_GEN,INTERVAL)..
SUM(STARTUP_TYPE,STARTUP_BLOCK_STATUS(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE)) =L= 1 - UNIT_STATUS(VARIABLE_START_GEN,INTERVAL)
;

Q_HOURS_OFFLINE8(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE)$(DIAG(STARTUP_TYPE,"COLD") EQ 0)..
OFFLINE_HOUR_SLACK(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE) =L= STARTUP_BLOCK_STATUS(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE)*(OFFLINE_BLOCK(VARIABLE_START_GEN,STARTUP_TYPE+1)
         - OFFLINE_BLOCK(VARIABLE_START_GEN,STARTUP_TYPE) - INTERVAL_LENGTH)
;

Q_HOURS_OFFLINE9(VARIABLE_START_GEN,INTERVAL,"COLD")..
OFFLINE_HOUR_SLACK(VARIABLE_START_GEN,INTERVAL,"COLD") =L= STARTUP_BLOCK_STATUS(VARIABLE_START_GEN,INTERVAL,"COLD")*(MAX_OFFLINE_TIME(VARIABLE_START_GEN)
         - OFFLINE_BLOCK(VARIABLE_START_GEN,"COLD") - INTERVAL_LENGTH)
;

Q_VARIABLE_STARTUP1(VARIABLE_START_GEN,INTERVAL)..
STARTUP_COST_HELPER(VARIABLE_START_GEN,INTERVAL) =E= SUM(STARTUP_TYPE,STARTUP_BLOCK_STATUS(VARIABLE_START_GEN,INTERVAL,STARTUP_TYPE)*STARTUP_COST_BLOCK(VARIABLE_START_GEN,STARTUP_TYPE))
;

Q_VARIABLE_STARTUP2(VARIABLE_START_GEN,INTERVAL)..
STARTUP_COST(VARIABLE_START_GEN,INTERVAL) =L= STARTUP_COST_BLOCK(VARIABLE_START_GEN,"COLD")*UNIT_STARTUP(VARIABLE_START_GEN,INTERVAL)
;

Q_VARIABLE_STARTUP3(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
INITIAL_STARTUP_COST_HELPER(VARIABLE_START_GEN) - STARTUP_COST(VARIABLE_START_GEN,INTERVAL) =L= STARTUP_COST_BLOCK(VARIABLE_START_GEN,"COLD")
         *(1-UNIT_STARTUP(VARIABLE_START_GEN,INTERVAL))
;

Q_VARIABLE_STARTUP4(VARIABLE_START_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
STARTUP_COST_HELPER(VARIABLE_START_GEN,INTERVAL-1) - STARTUP_COST(VARIABLE_START_GEN,INTERVAL) =L= STARTUP_COST_BLOCK(VARIABLE_START_GEN,"COLD")
         *(1-UNIT_STARTUP(VARIABLE_START_GEN,INTERVAL))
;

Q_VARIABLE_STARTUP5(NONVARIABLE_START_GEN,INTERVAL)..
STARTUP_COST(NONVARIABLE_START_GEN,INTERVAL) =E= GENVALUE(NONVARIABLE_START_GEN,"STARTUP_COST")*UNIT_STARTUP(NONVARIABLE_START_GEN,INTERVAL)
;
********************************************************************************
Q_MAX_START(MAX_START_GEN,INTERVAL)..
SUM(H$(ORD(H) LT ORD(INTERVAL) + 24/INTERVAL_LENGTH),UNIT_STARTUP(MAX_START_GEN,H) ) =L= GENVALUE(MAX_START_GEN,"MAX_STARTS")
;

$onText
Q_GENPUMP_FC(LESR,INTERVAL)..
UNIT_STATUS(LESR,INTERVAL)=L= 1
;


Q_GENPUMP_STATUS(LESR,INTERVAL)..
PUMPING(LESR,INTERVAL) =E= 0
;
$offText

Q_SU_PUMP_GENLIMITLOW_TRAJECTORY1(ESR,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - PUMPDOWN_PERIOD(ESR) AND (ORD(INTERVAL) GE PUMPUP_PERIOD(ESR)-INTERVALS_PUMPUP_AGO(ESR)))..
CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
         =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(ESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1)),UNIT_PUMPDOWN(ESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(ESR)+1 )),UNIT_PUMPUP(ESR,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(ESR)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(ESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")*
         MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1)),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*UNIT_PUMPDOWN(ESR,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(ESR,INTERVAL)*GENVALUE(ESR,"CAPACITY")
;
$onText
Q_SU_FC_GENLIMITLOW_TRAJECTORY1(ESR,LESR,INTERVAL)$(ORD(INTERVAL) LE CARD(INTERVAL) - PUMPDOWN_PERIOD(LESR) AND (ORD(INTERVAL) GE PUMPUP_PERIOD(LESR)-INTERVALS_PUMPUP_AGO(LESR)))..
CONVENTIONAL_PUMP_SCHEDULE(LESR,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(LESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),UNIT_PUMPDOWN(LESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR)+1 )),UNIT_PUMPUP(LESR,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(LESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")*
         MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*UNIT_PUMPDOWN(LESR,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(LESR,INTERVAL)*GENVALUE(LESR,"CAPACITY")
;
$offText


Q_SU_PUMP_GENLIMITLOW_TRAJECTORY2(ESR,INTERVAL)$(ORD(INTERVAL) LT  PUMPUP_PERIOD(ESR)-INTERVALS_PUMPUP_AGO(ESR))..
CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
         =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(ESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1)),UNIT_PUMPDOWN(ESR,H))
         - PREVIOUS_UNIT_PUMPUP(ESR) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(ESR,H))
         ) +
         (PREVIOUS_UNIT_PUMPUP(ESR))*(INTERVALS_PUMPUP_AGO(ESR)+ ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME")) +
         SUM(H$(ORD(H) LE ORD(INTERVAL)),
         (ORD(INTERVAL)-ORD(H)+1)*INTERVAL_LENGTH*UNIT_PUMPUP(ESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME")
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(ESR)-1)),
         (ORD(H)-ORD(INTERVAL))*UNIT_PUMPDOWN(ESR,H))*(STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(ESR,INTERVAL)*GENVALUE(ESR,"CAPACITY")
;
$onText
Q_SU_FC_GENLIMITLOW_TRAJECTORY2(ESR,LESR,INTERVAL)$(ORD(INTERVAL) LT  PUMPUP_PERIOD(LESR)-INTERVALS_PUMPUP_AGO(LESR))..
CONVENTIONAL_PUMP_SCHEDULE(LESR,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(LESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),UNIT_PUMPDOWN(LESR,H))
         - PREVIOUS_UNIT_PUMPUP(LESR) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(LESR,H))
         ) +
         (PREVIOUS_UNIT_PUMPUP(LESR))*(INTERVALS_PUMPUP_AGO(LESR)+ ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME")) +
         SUM(H$(ORD(H) LE ORD(INTERVAL)),
         (ORD(INTERVAL)-ORD(H)+1)*INTERVAL_LENGTH*UNIT_PUMPUP(LESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME")
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),
         (ORD(H)-ORD(INTERVAL))*UNIT_PUMPDOWN(LESR,H))*(STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(LESR,INTERVAL)*GENVALUE(LESR,"CAPACITY")
;
$offText

Q_SU_PUMP_GENLIMITLOW_TRAJECTORY3(ESR,INTERVAL)$(ORD(INTERVAL) GT  CARD(INTERVAL) - PUMPDOWN_PERIOD(ESR) AND ORD(INTERVAL) GE PUMPUP_PERIOD(ESR) - INTERVALS_PUMPUP_AGO(ESR))..
CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
         =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(ESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(ESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(ESR) + 1)),UNIT_PUMPUP(ESR,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(ESR)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(ESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL) ),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*UNIT_PUMPDOWN(ESR,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(ESR,INTERVAL)*GENVALUE(ESR,"CAPACITY")
;
$onText
Q_SU_FC_GENLIMITLOW_TRAJECTORY3(ESR,LESR,INTERVAL)$(ORD(INTERVAL) GT  CARD(INTERVAL) - PUMPDOWN_PERIOD(LESR) AND ORD(INTERVAL) GE PUMPUP_PERIOD(LESR) - INTERVALS_PUMPUP_AGO(LESR))..
CONVENTIONAL_PUMP_SCHEDULE(LESR,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE)) =G= STORAGEVALUE(ESR,"MIN_PUMP")*(PUMPING(LESR,INTERVAL)
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(LESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR) + 1)),UNIT_PUMPUP(LESR,H))
         ) +
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR)+1 )),
         (ORD(INTERVAL)-ORD(H)+1)*UNIT_PUMPUP(LESR,H))*STORAGEVALUE(ESR,"MIN_PUMP")*MIN(1,INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_STARTUP_TIME"))
         +
         SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL) ),
         (ORD(H)-ORD(INTERVAL))*STORAGEVALUE(ESR,"MIN_PUMP")*UNIT_PUMPDOWN(LESR,H))*MIN(1,(INTERVAL_LENGTH/STORAGEVALUE(ESR,"PUMP_SHUTDOWN_TIME")))
         - UNIT_STATUS(LESR,INTERVAL)*GENVALUE(LESR,"CAPACITY")
;
$offText

Q_SU_PUMP_RESERVE_TRAJECTORY1(ESR,LESR,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LE CARD(INTERVAL) - PUMPDOWN_PERIOD(LESR) AND (ORD(INTERVAL) GE PUMPUP_PERIOD(LESR))-1)..
GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(ESR,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),UNIT_PUMPDOWN(LESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR) + 1)),UNIT_PUMPUP(LESR,H))
         )
;

Q_SU_PUMP_RESERVE_TRAJECTORY2(ESR,LESR,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) LT  PUMPUP_PERIOD(LESR)-1)..
GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(ESR,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE (ORD(INTERVAL) + PUMPDOWN_PERIOD(LESR)-1)),UNIT_PUMPDOWN(LESR,H))
         - PREVIOUS_UNIT_PUMPUP(LESR) - SUM(H$(ORD(H) LE ORD(INTERVAL)),UNIT_PUMPUP(LESR,H))
         )
;
* Perhaps need not focus that much since we're not harnessing reserve from fuel cell
Q_SU_PUMP_RESERVE_TRAJECTORY3(ESR,LESR,INTERVAL,RESERVETYPE)$(ORD(INTERVAL) GT  CARD(INTERVAL) - PUMPDOWN_PERIOD(LESR))..
GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE) =L= STORAGEVALUE(ESR,"MAX_PUMP")*(1
         - SUM(H$(ORD(H) GE ORD(INTERVAL) AND ORD(H) LE CARD(INTERVAL)),UNIT_PUMPDOWN(LESR,H))
         - SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE (ORD(INTERVAL) - PUMPUP_PERIOD(LESR) + 1)),UNIT_PUMPUP(LESR,H))
         )
;
* Could not understand it very well
Q_PUMPUP2(ESR,INTERVAL)$(ORD(INTERVAL) EQ 1)..
UNIT_PUMPUP(ESR,INTERVAL) - UNIT_PUMPDOWN(ESR,INTERVAL)
         =E= PUMPING(ESR,INTERVAL) - STORAGEVALUE(ESR,"INITIAL_PUMP_STATUS")
;
********************************************************************************--------Exclusively Nuclear-----------****************
$onText 11/29/2022
Q_NUCLEAR_RAMPDOWN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
*GENVALUE(NUCLEAR_GEN,"HOLD_TIME"))..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
;
Q_NUCLEAR_RAMPUP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
*GENVALUE(NUCLEAR_GEN,"HOLD_TIME"))..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)
;
*********************************************************************************
Q_NUCLEAR_RAMPDOWN_INITIAL(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
(GENVALUE(NUCLEAR_GEN,"INITIAL_MW")-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL))=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
;
Q_NUCLEAR_RAMPUP_INITIAL(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)
;
*-------------------------------------------------------------------------------
Q_NUCLEAR_STABLE_OUTPUT(NUCLEAR_GEN,INTERVAL)..
NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)+NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)+NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL)=E=1
;

* The value of PMINSTABLE is 2 hours; that's why 2 is multiplied in this equation
Q_MIN_STABLE(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT GENVALUE(NUCLEAR_GEN,"HOLD_TIME"))..
*$(ORD(INTERVAL) GT 2)..
(NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)-NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL-1))*GENVALUE(NUCLEAR_GEN,"HOLD_TIME")=l=
*SUM(INTERVAL$((ORD(INTERVAL)-PMINSTABLE)<=(ORD(INTERVAL)-1)),(NUCLEAR_RAMP_UP("CC NG 04",INTERVAL)+NUCLEAR_STABLE("CC NG 04",INTERVAL)))
NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL-2)+NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-2)+NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL-1)+NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1)
;

**10/13/22
Q_MIN_STABLE_INITIAL_UP(NUCLEAR_GEN,INTERVAL)$( (ORD(INTERVAL) LE GENVALUE(NUCLEAR_GEN,"HOLD_TIME")) AND(ORD(INTERVAL) GT 1) )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL+1))=l=GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(1-NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL))
;
Q_MIN_STABLE_INITIAL_DN(NUCLEAR_GEN,INTERVAL)$( (ORD(INTERVAL) LE GENVALUE(NUCLEAR_GEN,"HOLD_TIME")) AND(ORD(INTERVAL) GT 1) )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL+1))=G=-GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(1-NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL))
;
Q_MIN_STABLE_FIRST_HOUR(NUCLEAR_GEN,INTERVAL)$( (GENVALUE(NUCLEAR_GEN,"INITIAL_STABLE_HOUR") LT GENVALUE(NUCLEAR_GEN,"HOLD_TIME")) AND(ORD(INTERVAL) EQ 1) )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=E=0;
********************************************************************************
$offText
Q_GENLIMIT_LOW_NUC(NUCLEAR_GEN,INTERVAL)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL) =G= UNIT_STATUS(NUCLEAR_GEN,INTERVAL)*GENVALUE(NUCLEAR_GEN,"MIN_GEN")
*$onText
         +SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NUCLEAR_GEN,INTERVAL,RESERVETYPE))
*=G= UNIT_STATUS(NUCLEAR_GEN,INTERVAL)*GENVALUE(NUCLEAR_GEN,"MIN_GEN")
*$offText
;
** Added on May 24, 2022 ****
Q_LTE_GEN(NUCLEAR_GEN,ESR,INTERVAL)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)+SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NUCLEAR_GEN,INTERVAL,RESERVETYPE))=L= UNIT_STATUS(NUCLEAR_GEN,INTERVAL)*GENVALUE(NUCLEAR_GEN,"CAPACITY")
*-CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
*HT_DEMAND_VAR(INTERVAL)

*(BETA1*HEAT_EXT1(INTERVAL)+BETA2*HEAT_EXT2(INTERVAL))
;
*********** For fuel cell and electrolyzer incorporation **********************

* The fuel-cell thing has been taken care off by the GEN_TYPE

$onText

Q_PUMPMINLIMIT2_FC(ESR,LESR,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(LESR,INTERVAL) -
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE)) =G=         0
         + PUMPING(LESR,INTERVAL)*STORAGEVALUE(ESR,"MIN_PUMP")
         - UNIT_STATUS(LESR,INTERVAL)*GENVALUE(LESR,"CAPACITY")
;

Q_PUMPMAXLIMIT2_FC(ESR,LESR,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(LESR,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(LESR,INTERVAL,RESERVETYPE))  =L=
         STORAGEVALUE(ESR,"MAX_PUMP")*PUMPING(LESR,INTERVAL) + UNIT_STATUS(LESR,INTERVAL)*GENVALUE(LESR,"CAPACITY")
;
$offText

Q_GENPUMP_UC(ESR,INTERVAL)..
UNIT_STATUS(ESR,INTERVAL) =E= 0
;



Q_DISABLE_FC_RESERVE("FC1",INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE("FC1",INTERVAL,RESERVETYPE)=E=0;


Q_FUEL_CELL_SCHEDULE_TANK_START(LESR,ELECTROLYZER,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(LESR,INTERVAL)=L=(HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)+INITIAL_HYDROGEN_STORAGE)*.00020;

Q_FUEL_CELL_SCHEDULE_TANK(LESR,ELECTROLYZER,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(LESR,INTERVAL)=L=(HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)+HYDROGEN_STORAGE_LEVEL(ELECTROLYZER,INTERVAL-1))*.00020;

Q_ELECTROLYZER_RAMP_LIMIT_UP(ELECTROLYZER,INTERVAL)..
ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL)-ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL-1)=L=ELECTROLYZER_RAMP_RATE*INTERVAL_LENGTH*60;

Q_ELECTROLYZER_RAMP_LIMIT_DOWN(ELECTROLYZER,INTERVAL)..
ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL-1)-ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL)=L=ELECTROLYZER_RAMP_RATE*INTERVAL_LENGTH*60;

*$onText
Q_HYDROGEN_TANK_FEED(ELECTROLYZER,INTERVAL)..
HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)=E=ELECTROLYZER_LOAD_SCHEDULE(ELECTROLYZER,INTERVAL)*100*1000/41;

Q_HYDROGEN_STORAGE_GENERATING_START(ELECTROLYZER,LESR,INTERVAL)$(ORD(INTERVAL) EQ 1)..
HYDROGEN_STORAGE_LEVEL(ELECTROLYZER,INTERVAL) =E= INITIAL_HYDROGEN_STORAGE
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_SCHEDULE(LESR,INTERVAL)*100*1000/20
         + INTERVAL_MINUTES(INTERVAL)/60*HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)
;

Q_HYDROGEN_STORAGE_GENERATING(ELECTROLYZER,LESR,INTERVAL)$(ORD(INTERVAL) GT 1)..
HYDROGEN_STORAGE_LEVEL(ELECTROLYZER,INTERVAL) =E= HYDROGEN_STORAGE_LEVEL(ELECTROLYZER,INTERVAL-1)
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_SCHEDULE(LESR,INTERVAL)*100*1000/20
         + INTERVAL_MINUTES(INTERVAL)/60*HYDROGEN_STORAGE_INPUT(ELECTROLYZER,INTERVAL)
;
*$offText

$onText
Q_FORCE_FC_OFF(GEN,INTERVAL)..
UNIT_STATUS("FC1",INTERVAL)=E=0;
$offText

$onText
Q_DISABLE_NUC_RESERVE(NUCLEAR_GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(NUCLEAR_GEN,INTERVAL,RESERVETYPE)=E=0;
$offText

Q_NUCLEAR_MUST_RUN(NUCLEAR_GEN,INTERVAL)..
UNIT_STATUS(NUCLEAR_GEN,INTERVAL)=E=1
;
$onText 11/29
Q_STABLE_COMMITMENT_HARD_HI(NUCLEAR_GEN,INTERVAL)..
NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL)=G=UNIT_STABLE_STATUS_ENFORCED_ON(NUCLEAR_GEN,INTERVAL)
;
*----------------------Here are four new equations------------------------------
Q_UNIVERSAL_NUCLEAR_SCHEDULE_UP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GE  1 AND ( ORD(INTERVAL) LE GENVALUE(NUCLEAR_GEN,"HOLD_TIME") ) )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1))=l=(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
Q_INITIAL_NUCLEAR_SCHEDULE_UP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=l=(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
Q_UNIVERSAL_NUCLEAR_SCHEDULE_DN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GE  1 AND ( ORD(INTERVAL) LE GENVALUE(NUCLEAR_GEN,"HOLD_TIME") ) )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1))=G=-1*(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;

Q_INITIAL_NUCLEAR_SCHEDULE_DN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=G=-1*(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
$offText

*     Define_Model     *

MODEL SCUC /OBJECTIVE
OBJECTIVEB
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_HVDC
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW
$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY
Q_LOAD_BALANCE
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2
Q_RESERVE_TOTAL
Q_RESERVE_BALANCE
Q_GENTOTAL
Q_GEN_BLOCK_LIMIT1
Q_GEN_BLOCK_LIMIT2
Q_GENLIMIT_HIGH
Q_GENLIMIT_HIGH2
Q_RAMP_RATE_UP_BASIC
Q_RAMP_RATE_DOWN_BASIC
Q_RAMP_RATE_UP_BASIC0
Q_RAMP_RATE_DOWN_BASIC0
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_GENLIMITLOW_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_GENLIMITLOW_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_GENLIMITLOW_TRAJECTORY3
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPUP_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPUP_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPUP_TRAJECTORY0
Q_VARIABLE_FORECAST
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RESERVE_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RESERVE_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RESERVE_TRAJECTORY3
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPDOWN_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPDOWN_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_RAMPDOWN_TRAJECTORY0
Q_VARIABLE_RESERVE_CAPACITY
Q_MIN_RUN_TIME
Q_MIN_RUN_TIME2
Q_MIN_DOWN_TIME
Q_MIN_DOWN_TIME2
Q_COMMITMENT_HARD_HI
Q_COMMITMENT_HARD_LO
Q_MAX_START
Q_STARTUP
Q_STARTUP2
Q_STARTUP3
Q_RESERVE_CAPABILITY
Q_RESERVE_RAMPUP_LIMIT
Q_RESERVE_RAMPDOWN_LIMIT
Q_RESERVE_CAPABILITY_VG
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC, Q_TRANSMISSIONFLOW_CTGC2
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC2
$IFI '%CONTINGENCY_CHECK%' == YES Q_HVDC_CTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC
Q_HOURS_OFFLINE1
Q_HOURS_OFFLINE2
Q_HOURS_OFFLINE3
Q_HOURS_OFFLINE4
Q_HOURS_OFFLINE5
Q_HOURS_OFFLINE6
Q_HOURS_OFFLINE7
Q_HOURS_OFFLINE8
Q_HOURS_OFFLINE9
Q_VARIABLE_STARTUP1
Q_VARIABLE_STARTUP2
Q_VARIABLE_STARTUP3
Q_VARIABLE_STARTUP4
Q_VARIABLE_STARTUP5
Q_STORAGE_GENERATING_START
Q_STORAGE_GENERATING
Q_STORAGE_END
Q_GENPUMP
Q_PUMPMAXLIMIT
Q_STORAGE_MAX
Q_STORAGE_MIN
Q_PUMPMAXLIMIT2
Q_STORAGE_RESERVEUP1
Q_STORAGE_RESERVEUP2
Q_STORAGE_RESERVEDOWN1
Q_STORAGE_RESERVEDOWN2
Q_MIN_PUMP_TIME
Q_MIN_PUMP_TIME2
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_RAMP_RATE_UP
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_RAMP_RATE_UP2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY0
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_GENLIMIT_LOW
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_GENLIMIT_LOW2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY3
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY0
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY3
Q_PUMPUP
Q_PUMPUP2
Q_PUMPUP3
Q_STORAGE_PUMP_EFFICIENCY9
Q_STORAGE_GEN_EFFICIENCY9

*** Additional Nuclear Constraints**********************************************
$onText on November 28, 2022
Q_MIN_STABLE
**10/12/2022--------------------------------------------------------------------
Q_MIN_STABLE_INITIAL_UP
Q_MIN_STABLE_INITIAL_DN
Q_MIN_STABLE_FIRST_HOUR
Q_NUCLEAR_RAMPDOWN_INITIAL
Q_NUCLEAR_RAMPUP_INITIAL
Q_INITIAL_NUCLEAR_SCHEDULE_UP
Q_INITIAL_NUCLEAR_SCHEDULE_DN
**------------------------------------------------------------------------------

Q_NUCLEAR_RAMPDOWN
Q_NUCLEAR_RAMPUP
Q_NUCLEAR_STABLE_OUTPUT
************************

$offText
Q_GENLIMIT_LOW_NUC
*on November 28, 2022
*Q_DISABLE_NUC_RESERVE
Q_NUCLEAR_MUST_RUN
*** Added on May 24 ,2022 *****
Q_LTE_GEN
********************* For fuel cell & electrolyzer *****************************
Q_GENPUMP_UC

$onText
Q_GENPUMP_FC
Q_PUMPMINLIMIT2_FC
Q_GENPUMP_STATUS
$offText
********************************************************--------------------------------------------
Q_PUMPMINLIMIT
********************************************************--------------------------------------------
Q_DISABLE_FC_RESERVE
$onText on November 28, 2022
Q_STABLE_COMMITMENT_HARD_HI
$offText
*Q_UNIVERSAL_NUCLEAR_SCHEDULE
*Q_INITIAL_NUCLEAR_SCHEDULE

$onText
*Since I believe the ramp_up and ramp_down restrictions on conventional_pump_schedule will do the job.
Q_ELECTROLYZER_RAMP_LIMIT_UP
Q_ELECTROLYZER_RAMP_LIMIT_DOWN
$offText

$onText
* Also commenting this out since I believe the storage constraints are there for this hydrogen tank constraints
Q_HYDROGEN_TANK_FEED
Q_HYDROGEN_STORAGE_GENERATING_START
Q_HYDROGEN_STORAGE_GENERATING
$offText

/;


*     Solver_Options     *

$IF EXIST May24_TOTAL_DASCUCOUTPUT.gdx EXECUTE_LOADPOINT 'May24_TOTAL_DASCUCOUTPUT.gdx' ;
SCUC.iterlim =500000;
SCUC.optcr = 0.001;
SCUC.reslim = 1800;
option solvelink=5;
SCUC.optfile = 1;
heaplimit = 30000;
SCUC.threads=0;


*     Solve_Statement     *

SOLVE SCUC USING MIP MINIMIZING PRODCOST;


*     Post_Processing     *

PARAMETER VG_CURTAILMENT(GEN,INTERVAL);
VG_CURTAILMENT(VARIABLE_CAPACITY_RESOURCE,INTERVAL) = VG_FORECAST(INTERVAL,VARIABLE_CAPACITY_RESOURCE) - GEN_SCHEDULE.L(VARIABLE_CAPACITY_RESOURCE,INTERVAL);

PARAMETER MSS;
MSS=SCUC.modelStat;

PARAMETER INFEASIBILITIES;
INFEASIBILITIES=SCUC.numInfes;

PARAMETER SS;
SS=SCUC.solveStat;

PARAMETER RG;
RG=abs((SCUC.objEst-SCUC.objVal)/SCUC.objEst)*100;

PARAMETER PUMP_SCHEDULE(GEN,INTERVAL);
PUMP_SCHEDULE(GEN,INTERVAL) = CONVENTIONAL_PUMP_SCHEDULE.L(GEN,INTERVAL) ;


*     Footer     *

execute_unload 'TOTAL_DASCUCOUTPUT'


