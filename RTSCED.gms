*     Header     *

** RTSCED MODEL **
$ONEMPTY
$SETGLOBAL NETWORK_CHECK "NO"
$SETGLOBAL SUSD_TRAJECTORY_CHECK "NO"
$SETGLOBAL USE_INTEGER "YES"
$SETGLOBAL CONTINGENCY_CHECK "NO"
$if exist matglobs.gms $include matglobs.gms


*DECLARE GEN AND INTERVAL SETS
SET
INTERVAL
GEN
GENPARAM
COSTCURVEPARAM
SYSPARAM
BLOCK
GENBLOCK

*UNIQUE GEN SETS
WIND_GEN(GEN)
STEAM_GEN(GEN)
CT_GEN(GEN)
CC_GEN(GEN)
HYDRO_GEN(GEN)
NUCLEAR_GEN(GEN)
PV_GEN(GEN)
INTERFACE(GEN)
OUTAGE_GEN(GEN)
VARIABLE_DISPATCH_GEN(GEN)
CONVENTIONAL_GEN(GEN)
VARIABLE_GEN(GEN)
RAMP_LIMITED_GEN(GEN)
RAMP_LIMITED_GEN_NOSTARTUP(GEN)
EVERYTHING_BUT_INTERFACE(GEN)
VARIABLE_CAPACITY_RESOURCE(GEN)
MIN_GEN_GEN(GEN)
AVAILABLE_GEN(GEN)
**
ACTIVE_GEN(GEN)
HES_GEN(GEN)
**** On August 2022*****
NONUC_GEN(GEN)
MIN_GEN_GEN_NONUC(GEN)
RAMP_LIMITED_GEN_NONUC(GEN)
;

*DECLARE NETWORK SETS
SET
BUS
BRANCHPARAM
BRANCH

*BUS SETS
SLACKBUS(BUS)
NONSLACK_BUS(BUS)

*UNIQUE BRANCH SETS
CTGC_BRANCH(BRANCH)
AC_LINE(BRANCH)
FIXED_PAR(BRANCH)
ADJUSTABLE_PAR(BRANCH)
PAR(BRANCH)
HVDC(BRANCH)
BRANCH_AC(BRANCH)
;

*DECLARE RESERVE SETS
SET
RESERVEPARAM
RESERVETYPE
;

*DECLARE STORAGE SETS
SET
STORAGEPARAM

*UNIQUE STORAGE SETS
PUMPED_STORAGE_HYDRO(GEN)
ESR(GEN)
LESR(GEN)
CSP_GEN(GEN)
STORAGE_GEN(GEN)
CONVENTIONAL_STORAGE_GEN(GEN)
UNCONVENTIONAL_STORAGE_GEN(GEN)
NON_CONVENTIONAL_STORAGE(GEN)
NOT_STORAGE_GEN(GEN)
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(GEN)
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN_NOSTARTUP(GEN)
MIN_GEN_CONVENTIONAL_STORAGE_GEN(GEN)
;

*DECLARE RTC/RTD INITIAL CONDITIONS SETS
SET
INITIAL_DISPATCH_SLACK_SET
;
$onText
*/Unlike the other two Unit-commitment model; there is no MIN_RUN_GEN or MIN_DOWN_GEN
$offText
*     Declare_Parameters     *

*DECLARE SCALARS
SCALAR
INTERVAL_LENGTH
INTERVAL_UPDATE
NUMINTERVAL
PROCESS_TIME
INTERVAL_ADVISORY_LENGTH
LOSS_BIAS
;

*DECLARE GEN AND MAIN PARAMETERS
PARAMETERS
SYSTEMVALUE
INTERVAL_MINUTES(*)
BLOCK_COST(*,*)
BLOCK_CAP(*,*)
QSC
COST_CURVE(*,*)
LOAD(*)
GENVALUE(*,*)
VG_FORECAST(*,*)
GEN_FORCED_OUT(*)

;

*DECLARE NETWORK PARAMETERS
PARAMETERS
LOAD_DIST(*)
PTDF(*,*)
PTDF_PAR(*,*)
LODF(*,*)
BRANCHDATA(*,*)
BUS_DELIVERY_FACTORS(*,*)
GEN_DELIVERY_FACTORS(*,*)
;

*DECLARE RESERVE PARAMETERS
PARAMETERS
RESERVEVALUE(*,*)
RESERVE_COST(*,*)
RESERVELEVEL(*,*)
;

*DECLARE STORAGE PARAMETERS
PARAMETERS
STORAGEVALUE(*,*)
END_STORAGE_PENALTY_PLUS_PRICE(GEN)
END_STORAGE_PENALTY_MINUS_PRICE(GEN)
;

*DECLARE RTC/RTD INITIAL CONDITIONS GEN PARAMETERS
PARAMETERS
INITIAL_DISPATCH_SLACK(*)
ACTUAL_GEN_OUTPUT(*)
LAST_GEN_SCHEDULE(*)
RAMP_SLACK_UP(*)
RAMP_SLACK_DOWN(*)
LAST_STATUS(*)
LAST_STATUS_ACTUAL(*)
LAST_STARTUP
LAST_SHUTDOWN
;

*DECLARE RTC/RTD INITIAL CONDITIONS STORAGE PARAMETERS
PARAMETERS
ACTUAL_PUMP_OUTPUT(*)
LAST_PUMP_SCHEDULE(*)
LAST_PUMPSTATUS(*)
LAST_PUMPSTATUS_ACTUAL(*)
;

*DECLARE UC PARAMETERS
PARAMETERS
UNIT_STATUS(GEN,INTERVAL)
UNIT_STARTINGUP(GEN,INTERVAL)
UNIT_SHUTTINGDOWN(GEN,INTERVAL)
UNIT_STARTUPMINGENHELP(GEN,INTERVAL)
UNIT_SHUTTINGDOWN_ACTUAL(GEN)
UNIT_STARTINGUP_ACTUAL(GEN)
STARTUP_PERIOD(GEN)
***08/23/22
*NUCLEAR_RAMP_UP(GEN,INTERVAL)
*NUCLEAR_RAMP_DN(GEN,INTERVAL)
$onText November 28,2022
NUCLEAR_STABLE(GEN,INTERVAL)
$offText
;

*DECLARE STORAGE UC PARAMETERS
PARAMETERS
PUMPING(GEN,INTERVAL)
UNIT_PUMPINGUP(GEN,INTERVAL)
UNIT_PUMPINGDOWN(GEN,INTERVAL)
UNIT_PUMPUPMINGENHELP(GEN,INTERVAL)
UNIT_PUMPINGDOWN_ACTUAL
UNIT_PUMPINGUP_ACTUAL
;


*     Load_Inputs     *

*LOAD BASE INPUTS
$GDXIN GENERAL_MODEL_INPUT
$load GEN
$load BUS
$load GENPARAM
$load RESERVEPARAM
$load BRANCHPARAM
$load COSTCURVEPARAM
$load BRANCH
$load SYSPARAM
$load RESERVETYPE
$load BLOCK
$load GENBLOCK
$load SYSTEMVALUE

*LOAD INPUTS
$GDXIN RTSCEDINPUT1
$load COST_CURVE
$load BLOCK_COST
$load BLOCK_CAP

$GDXIN RTSCEDINPUT2
*DYNAMIC SCALARS
$load NUMINTERVAL
$load INTERVAL_LENGTH
$load INTERVAL_ADVISORY_LENGTH
$load INTERVAL_UPDATE
$load PROCESS_TIME
$load INTERVAL_MINUTES

*DYNAMIC SETS
$load INTERVAL
*DYNAMIC PARAMETERS
$load GENVALUE
$load LOAD
$load VG_FORECAST
$load GEN_FORCED_OUT
**
*$load DH_LOAD

*LOAD RTSCED NETWORK INPUTS
$GDXIN RTSCEDINPUT1
$load LOAD_DIST
$load PTDF
$load PTDF_PAR
$load LODF
$load BRANCHDATA

$GDXIN RTSCEDINPUT2
*DYNAMIC SCALARS
$load LOSS_BIAS
*DYNAMIC PARAMETERS
$load BUS_DELIVERY_FACTORS
$load GEN_DELIVERY_FACTORS

*LOAD RTSCED RESERVE INPUTS
$GDXIN RTSCEDINPUT1
$load RESERVEVALUE
$load RESERVE_COST
$load QSC

$GDXIN RTSCEDINPUT2
$load RESERVELEVEL

*LOAD INPUTS
$GDXIN RTSCEDINPUT1
$load INITIAL_DISPATCH_SLACK_SET

$GDXIN RTSCEDINPUT2
$load INITIAL_DISPATCH_SLACK
$load ACTUAL_GEN_OUTPUT
$load LAST_GEN_SCHEDULE
$load RAMP_SLACK_UP
$load RAMP_SLACK_DOWN
$load LAST_STATUS
$load LAST_STATUS_ACTUAL

*LOAD INPUTS
$GDXIN RTSCEDINPUT1
$load STORAGEPARAM

$GDXIN RTSCEDINPUT2
*DYNAMIC PARAMETERS
$load STORAGEVALUE
$load END_STORAGE_PENALTY_PLUS_PRICE
$load END_STORAGE_PENALTY_MINUS_PRICE

*LOAD INITIAL STORAGE INPUTS
$GDXIN RTSCEDINPUT2
*DYNAMIC PARAMETERS
$load ACTUAL_PUMP_OUTPUT
$load LAST_PUMP_SCHEDULE
$load LAST_PUMPSTATUS
$load LAST_PUMPSTATUS_ACTUAL

*LOAD RTSCED UC INPUTS
$GDXIN RTSCEDINPUT2
*DYNAMIC PARAMETERS
$load UNIT_STATUS
$load UNIT_STARTINGUP
$load UNIT_SHUTTINGDOWN
$load UNIT_STARTUPMINGENHELP
$load UNIT_SHUTTINGDOWN_ACTUAL
$load UNIT_STARTINGUP_ACTUAL
$load STARTUP_PERIOD
********************************************************************************
****08/23/22
*$load NUCLEAR_RAMP_UP
*$load NUCLEAR_RAMP_DN
$onText November 28,2022
$load NUCLEAR_STABLE
$offText
********************************************************************************
*LOAD RTSCED UC STORAGE INPUTS
$GDXIN RTSCEDINPUT2
*DYNAMIC PARAMETERS
$load PUMPING
$load UNIT_PUMPINGUP
$load UNIT_PUMPINGDOWN
$load UNIT_PUMPUPMINGENHELP
$load UNIT_PUMPINGDOWN_ACTUAL
$load UNIT_PUMPINGUP_ACTUAL


*GEN SET DEFINITIONS
STEAM_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 1);
CT_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 2);
CC_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 3);
HYDRO_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 4);
NUCLEAR_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 5);
WIND_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 7);
PV_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 10);
INTERFACE(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 14);
OUTAGE_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 15);
VARIABLE_DISPATCH_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 16);
AVAILABLE_GEN(GEN) = GEN(GEN) - OUTAGE_GEN(GEN);
CONVENTIONAL_GEN(GEN) = STEAM_GEN(GEN) + CT_GEN(GEN) + CC_GEN(GEN) + HYDRO_GEN(GEN) + NUCLEAR_GEN(GEN);
VARIABLE_GEN(GEN) = WIND_GEN(GEN) + PV_GEN(GEN);
** Addition on 8th November,2020
ACTIVE_GEN(GEN)=GEN(GEN)-OUTAGE_GEN(GEN)-NUCLEAR_GEN(GEN)-PV_GEN(GEN);
HES_GEN(GEN)=NUCLEAR_GEN(GEN)+PV_GEN(GEN);

***08/23/2022
NONUC_GEN(GEN)=GEN(GEN)-OUTAGE_GEN(GEN)-NUCLEAR_GEN(GEN);


LOOP (GEN,
         IF(GENVALUE(GEN,"MIN_GEN") EQ 0 OR GENVALUE(GEN,"STARTUP_TIME") EQ 0 OR GENVALUE(GEN,"SHUTDOWN_TIME") EQ 0,
                 IF(GENVALUE(GEN,"RAMP_RATE") GT 0 AND GENVALUE(GEN,"RAMP_RATE") LT GENVALUE(GEN,"CAPACITY")/(INTERVAL_LENGTH*60),
                         RAMP_LIMITED_GEN_NOSTARTUP(GEN) = YES;
                   );
         ELSE
                 IF(GENVALUE(GEN,"RAMP_RATE") GT 0,
                         IF((GENVALUE(GEN,"CAPACITY") - GENVALUE(GEN,"MIN_GEN"))/GENVALUE(GEN,"RAMP_RATE") + 60*MAX(GENVALUE(GEN,"STARTUP_TIME"),60*GENVALUE(GEN,"SHUTDOWN_TIME")) GT (INTERVAL_LENGTH*60),
                                 RAMP_LIMITED_GEN(GEN) = YES;
                           );
                   );
            );
     );
RAMP_LIMITED_GEN(GEN) = RAMP_LIMITED_GEN(GEN) - OUTAGE_GEN(GEN);
RAMP_LIMITED_GEN_NOSTARTUP(GEN) = RAMP_LIMITED_GEN_NOSTARTUP(GEN) - OUTAGE_GEN(GEN);
EVERYTHING_BUT_INTERFACE(GEN) = GEN(GEN) - INTERFACE(GEN) - VARIABLE_DISPATCH_GEN(GEN);
VARIABLE_CAPACITY_RESOURCE(GEN) = VARIABLE_GEN(GEN) + VARIABLE_DISPATCH_GEN(GEN);
MIN_GEN_GEN(GEN) = YES$(GENVALUE(GEN,"MIN_GEN") NE 0);
MIN_GEN_GEN(GEN) = MIN_GEN_GEN(GEN) - OUTAGE_GEN(GEN);
****08/22
MIN_GEN_GEN_NONUC(GEN)=MIN_GEN_GEN(GEN)-NUCLEAR_GEN(GEN);
RAMP_LIMITED_GEN_NONUC(GEN)=RAMP_LIMITED_GEN(GEN)-NUCLEAR_GEN(GEN);

ALIAS (INTERVAL,H);
ALIAS (GEN,G);

*BRANCH SET DEFINITIONS
SLACKBUS(BUS) = YES$(ORD(BUS) EQ SYSTEMVALUE("SLACK_BUS"));
NONSLACK_BUS(BUS) = BUS(BUS) - SLACKBUS(BUS);
CTGC_BRANCH(BRANCH) = YES$(BRANCHDATA(BRANCH,"CTGC_MONITOR") EQ 1);
AC_LINE(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 1);
FIXED_PAR(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 2);
ADJUSTABLE_PAR(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 3);
PAR(BRANCH) = FIXED_PAR(BRANCH) + ADJUSTABLE_PAR(BRANCH);
HVDC(BRANCH) = YES$(BRANCHDATA(BRANCH,"BRANCH_TYPE") EQ 4);
BRANCH_AC(BRANCH) = BRANCH(BRANCH) - HVDC(BRANCH);

ALIAS (BUS,BUS2,BUS3,BUS4);
ALIAS (NONSLACK_BUS,NONSLACK_BUS1);
ALIAS (BRANCH,BRANCH2);
ALIAS (BRANCH_AC2,BRANCH_AC);

ALIAS (RESERVETYPE,R);

*STORAGE SET DEFINITIONS
*Needs UC decisions
PUMPED_STORAGE_HYDRO(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 6);
*Does not need UC decisions
ESR(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 8);
*Only provides A/S
LESR(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 9);
CSP_GEN(GEN) = YES$(GENVALUE(GEN,"GEN_TYPE") EQ 11);
STORAGE_GEN(GEN) = PUMPED_STORAGE_HYDRO(GEN) + ESR(GEN) + LESR(GEN) + CSP_GEN(GEN);
CONVENTIONAL_STORAGE_GEN(GEN) = STORAGE_GEN(GEN) - ESR(GEN) - LESR(GEN) - CSP_GEN(GEN);
UNCONVENTIONAL_STORAGE_GEN(GEN) = STORAGE_GEN(GEN) - CONVENTIONAL_STORAGE_GEN(GEN);
NON_CONVENTIONAL_STORAGE(GEN) = GEN(GEN) - CONVENTIONAL_STORAGE_GEN(GEN);
NOT_STORAGE_GEN(GEN) = GEN(GEN) - STORAGE_GEN(GEN);
LOOP (STORAGE_GEN,
         IF(STORAGEVALUE(STORAGE_GEN,"MIN_GEN") EQ 0 OR STORAGEVALUE(STORAGE_GEN,"PUMP_STARTUP_TIME") EQ 0 OR STORAGEVALUE(STORAGE_GEN,"PUMP_SHUTDOWN_TIME") EQ 0,
                 IF(STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") GT 0 AND STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") LT STORAGEVALUE(STORAGE_GEN,"CAPACITY")/(INTERVAL_LENGTH*60),
                         RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN_NOSTARTUP(STORAGE_GEN) = YES;
                   );
         ELSE
                 IF((STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") GT 0 AND  (STORAGEVALUE(STORAGE_GEN,"CAPACITY") - STORAGEVALUE(STORAGE_GEN,"MIN_GEN"))/STORAGEVALUE(STORAGE_GEN,"PUMP_RAMP_RATE") + 60*MAX(STORAGEVALUE(STORAGE_GEN,"PUMP_STARTUP_TIME"),STORAGEVALUE(STORAGE_GEN,"PUMP_SHUTDOWN_TIME")) GT (INTERVAL_LENGTH*60)),
                         RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(STORAGE_GEN) = YES;
                   );
            );
     );
RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) - OUTAGE_GEN(CONVENTIONAL_STORAGE_GEN);
MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = YES$(STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MIN_PUMP") NE 0);
MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) = MIN_GEN_CONVENTIONAL_STORAGE_GEN(CONVENTIONAL_STORAGE_GEN) - OUTAGE_GEN(CONVENTIONAL_STORAGE_GEN);

$GDXIN DASCUCINPUT1
$IFI '%USEGAMS%' == 'NO'     PARAMETER INJECTION_FACTOR(BUS,GEN) GENERATOR PARTICIPATION FACTORS ;
$IFI '%USEGAMS%' == 'NO'     $LOAD INJECTION_FACTOR
$IFI '%USEGAMS%' == 'YES'    PARAMETER INJECTION_FACTOR(BUS,GEN) GENERATOR INJECTION FACTORS /
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\PARTF.inc";
$IFI '%USEGAMS%' == 'YES'    /  ;

$IFI '%USEGAMS%' == 'NO'     SET GENBUS(BUS,GEN) LIST OF GENS AND THEIR BUSES  ;
$IFI '%USEGAMS%' == 'NO'     $LOAD GENBUS
$IFI '%USEGAMS%' == 'YES'    SET GENBUS(BUS,GEN) LIST OF GENS AND THEIR BUSES /
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\GENBUSSET.inc";
$IFI '%USEGAMS%' == 'YES'    /;

$IFI '%USEGAMS%' == 'NO'     SET BRANCHBUS(BRANCH,BUS,BUS2) BRANCH FROM_BUS AND TO_BUS CONNECTION   ;
$IFI '%USEGAMS%' == 'NO'     $LOAD BRANCHBUS
$IFI '%USEGAMS%' == 'YES'    SET BRANCHBUS(BRANCH,BUS,BUS2) BRANCH FROM_BUS AND TO_BUS CONNECTION/
$IFI '%USEGAMS%' == 'YES'    $INCLUDE "%DIRECTORY%TEMP\BRANCHBUS.inc";
$IFI '%USEGAMS%' == 'YES'    /;

*     Declare_Variables     *

*DECLARE GEN AND MAIN VARIABLES
VARIABLES
PRODCOST
PRODCOST_BY_INTERVAL(INTERVAL)
GEN_SCHEDULE(GEN,INTERVAL)
GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)
;

POSITIVE VARIABLES
LOSS_LOAD(INTERVAL)
ADDITIONAL_LOAD_SLACK(INTERVAL)
RAMP_UP_PENALTY(GEN,INTERVAL)
RAMP_DOWN_PENALTY(GEN,INTERVAL)
**
DH_LOSS_LOAD(INTERVAL)
;

*DECLARE NETWORK VARIABLES
VARIABLES
NET_ENERGY(BUS,INTERVAL)
LINEFLOW(BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE(BRANCH,INTERVAL)
PHASE_SHIFTER_CONTRIBUTION(BUS,INTERVAL)
HVDC_CONTRIBUTION(BUS,INTERVAL)
LINEFLOW_CTGC(BRANCH,BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE_CTGC(BRANCH,BRANCH,INTERVAL)
HVDC_CONTRIBUTION_OFFSET_CTGC(BRANCH,BUS,INTERVAL)
;

POSITIVE VARIABLES
PHASE_SHIFTER_ANGLE1(BRANCH,INTERVAL)
PHASE_SHIFTER_ANGLE2(BRANCH,INTERVAL)
BRANCH_SLACK1(BRANCH,INTERVAL)
BRANCH_SLACK2(BRANCH,INTERVAL)
;

*DECLARE RESERVE VARIABLES
POSITIVE VARIABLES
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)
INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
TOTAL_RESERVE(INTERVAL,RESERVETYPE)
;

*DECLARE STORAGE VARIABLES
VARIABLES
ENDING_STORAGE(GEN)
STORAGE_LEVEL(GEN,INTERVAL) VARIABLE REFERS TO STORAGE LEVEL AT END OF INTERVAL
;

POSITIVE VARIABLES
CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL)
NC_STORAGE_GEN_SCHEDULE(GEN,INTERVAL)
NC_STORAGE_PUMP_SCHEDULE(GEN,INTERVAL)
WASTED_STORAGE(GEN,INTERVAL)
END_STORAGE_PENALTY_PLUS
END_STORAGE_PENALTY_MINUS
PUMP_EFFICIENCY(GEN,INTERVAL)
GEN_EFFICIENCY(GEN,INTERVAL)
;


*     Define_Variables     *

*GEN VARIABLE LIMITS
GEN_BLOCK_SCHEDULE.LO(AVAILABLE_GEN,"BLOCK1",INTERVAL) = MIN(GENVALUE(AVAILABLE_GEN,"MIN_GEN"),0);
GEN_BLOCK_SCHEDULE.LO(GEN,BLOCK,INTERVAL)$(ORD(BLOCK) GT 1) = 0;
RAMP_UP_PENALTY.UP(GEN,INTERVAL)=0;
RAMP_DOWN_PENALTY.UP(GEN,INTERVAL)=0;
GEN_SCHEDULE.LO(OUTAGE_GEN,INTERVAL)=0;
GEN_SCHEDULE.UP(OUTAGE_GEN,INTERVAL)=0;
GEN_BLOCK_SCHEDULE.LO(OUTAGE_GEN,"BLOCK1",INTERVAL) = 0;
GEN_BLOCK_SCHEDULE.UP(OUTAGE_GEN,"BLOCK1",INTERVAL) = 0;

*NETWORK VARIABLE LIMITS
PHASE_SHIFTER_ANGLE.UP(AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.LO(AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.UP(HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE.LO(HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.UP(BRANCH,AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.LO(BRANCH,AC_LINE,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.UP(BRANCH,HVDC,INTERVAL) = 0;
PHASE_SHIFTER_ANGLE_CTGC.LO(BRANCH,HVDC,INTERVAL) = 0;

*RESERVE VARIABLE LIMITS
GEN_RESERVE_SCHEDULE.UP(OUTAGE_GEN,INTERVAL,RESERVETYPE) = 0;
GEN_RESERVE_SCHEDULE.UP(INTERFACE,INTERVAL,RESERVETYPE) = 0;

*STORAGE VARIABLE LIMITS
CONVENTIONAL_PUMP_SCHEDULE.UP(NOT_STORAGE_GEN,INTERVAL) = 0;


*     Declare_Equations     *

*DECLARE NORMAL GEN AND MAIN EQUATIONS
EQUATIONS
OBJECTIVE FUNCTION USED FOR MINIMIZATION
OBJECTIVEB(INTERVAL)
Q_LOAD_BALANCE(INTERVAL) EQUALS TOTAL GENERATION TO TOTAL LOAD
*Q_THERMAL_LOAD_BALANCE(GEN,INTERVAL)

*DISPATCH CONSTRAINTS
Q_GENTOTAL(GEN,INTERVAL) TOTAL BLOCK GENERATION EQUALS SCHEDULE
Q_GEN_BLOCK_LIMIT1(GEN,BLOCK,INTERVAL) FOR BLOCK 1
Q_GEN_BLOCK_LIMIT2(GEN,BLOCK,INTERVAL) FOR OTHER BLOCKS
Q_GENLIMIT_HIGH(GEN,INTERVAL) CAPACITY CONSTRAINT
Q_GENLIMIT_HIGH2(GEN,INTERVAL) CAPACITY CONSTRAINT WITH RESERVES TOO
Q_RAMP_RATE_UP_BASIC(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_DOWN_BASIC(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_UP_BASIC0(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_RAMP_RATE_DOWN_BASIC0(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY NO SUSD
Q_VARIABLE_FORECAST(GEN,INTERVAL) WIND AND PV GENERATORS LIMIT BASED ON FORECASTS IS ADJUSTED EACH INTERVAL
;

*DECLARE NETWORK EQUATIONS
$IFI '%NETWORK_CHECK%' == YES EQUATIONS
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1(BRANCH,INTERVAL) LOW LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2(BRANCH,INTERVAL) HIGH LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3(BRANCH,INTERVAL) ADDING BOTH TO SHOW NEGATIVE
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4(BRANCH,INTERVAL) 'FIXED PARS UPPER'
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5(BRANCH,INTERVAL) FIXED PARS LOWER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER(BUS,INTERVAL) TURNING PHASE SHIFTER TO ENERGY INJECTION
$IFI '%NETWORK_CHECK%' == YES Q_HVDC(BUS,INTERVAL) FROM BUS OF HVDC SAME AS SINK AND TO BUS SAME AS SOURCE
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW(BRANCH,INTERVAL) DEFINES TRANSMISSION FLOWS BASED ON DELTA ANGLES AND BPRIME
$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY(BUS,INTERVAL) NET ENERGY LEAVING A BUS
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT IN NEGATIVE DIRECTION

*NETWORK CONTINGENCY CONSTRAINTS
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC(BRANCH,BRANCH2,INTERVAL) DEFINES TRANSMISSION FLOWS FOLLOWING CONTINGENCY BASED ON DELTA ANGLES AND BPRIME
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC2(BRANCH,BRANCH2,INTERVAL) FLOW OF TRIPPED TX IS 0
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC(BRANCH,BRANCH,INTERVAL) ANGLE OF PAR THAT IS OUT IS 0
$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC2(BRANCH,BRANCH,INTERVAL) ANGLE OF PAR THAT IS NOT OUT IS SAME AS PRECTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_HVDC_CTGC(BRANCH,BUS,INTERVAL) IF HVDC FAILS ADJUST BUS OUTPUTS
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC(BRANCH,BRANCH2,INTERVAL) EMERGENCY TRANSMISSION LIMIT CONSTRAINT FOLLOWING CONTINGENCY
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC(BRANCH,BRANCH2,INTERVAL) EMERGENCY TRANSMISSION LIMIT CONSTRAINT IN OTHER DIRECTION FOLLOWING CONTINGENCY
$IFI '%CONTINGENCY_CHECK%' == YES ;

*DECLARE RESERVE EQUATIONS
EQUATIONS
Q_RESERVE_TOTAL(INTERVAL,RESERVETYPE) INCLUDE INCLUSIVE RESERVES
Q_RESERVE_BALANCE(INTERVAL,RESERVETYPE) TOTAL RESERVE SCHEDULES GREATER EQUAL TO REQUIREMENT
Q_RESERVE_BALANCE2(INTERVAL,RESERVETYPE) TOTAL RESERVE SCHEDULES EQUAL TO ZERO IF REQUIREMENT IS ZERO
*RESERVE CONSTRAINTS
Q_RESERVE_CAPABILITY(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE
Q_RESERVE_RAMPUP_LIMIT(GEN,INTERVAL) SHARING RAMP CAPABILITY BETWEEN RESERVE PRODUCTS
Q_RESERVE_RAMPDOWN_LIMIT (GEN,INTERVAL) SHARING RAMP CAPABILITY BETWEEN RESERVE PRODUCTS
Q_RESERVE_CAPABILITY_VG(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE FOR VG
Q_VARIABLE_RESERVE_CAPACITY(GEN,INTERVAL) IF WIND OR VG CAN PROVIDE RESERVES MUST BE BELOW FORECAST RATHER THAN NAMEPLATE
****************************08/23/2022*****************************************
Q_DISABLE_FC_RESERVE(GEN,INTERVAL,RESERVETYPE)
;

*DECLARE STORAGE DISPATCH EQUATIONS
EQUATIONS
Q_PUMPMAXLIMIT(GEN,INTERVAL) MAXIMUM PUMPING LIMIT
Q_PUMPMINLIMIT(GEN,INTERVAL) MINIMUM PUMPING LIMIT
Q_PUMP_RAMP_RATE_DOWN(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY
Q_PUMP_RAMP_RATE_DOWN2(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY FOR INTERVAL 0
Q_PUMPMINLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
Q_PUMPMAXLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
;

*DECLARE INTERVAL 1 RTSCUC/RTSCED RAMP CONSTRAINT EQUATIONS
EQUATIONS
*INTERVAL 1 RAMP CONSTRAINTS
Q_RAMP_RATE_UP0_BP(GEN,INTERVAL)
Q_RAMP_RATE_DOWN0_BP(GEN,INTERVAL)
Q_RAMP_RATE_UP0_ACTUAL(GEN,INTERVAL)
Q_RAMP_RATE_DOWN0_ACTUAL(GEN,INTERVAL)
Q_SU_INTERVAL1(GEN,INTERVAL)
;

*DECLARE INITIAL CONDITION STORAGE EQUATIONS
EQUATIONS
*STORAGE INTERVAL 1 CONSTRAINTS
Q_PUMP_RAMP_RATE_UP0_BP(GEN,INTERVAL)
Q_PUMP_RAMP_RATE_DOWN0_BP(GEN,INTERVAL)
Q_PUMP_RAMP_RATE_UP0_ACTUAL(GEN,INTERVAL)
Q_PUMP_RAMP_RATE_DOWN0_ACTUAL(GEN,INTERVAL)
Q_PUMPUP2(GEN,INTERVAL)
;

*DECLARE STORAGE SIMPLE RT EFFICIENCY ENERGY LIMITS EQUATIONS
EQUATIONS
Q_STORAGE_GENERATING_START (GEN,GEN,INTERVAL) DEFINES THE AMOUNT OF ENERGY STORAGE AT THE BEGINNING OF THE DAY
Q_STORAGE_GENERATING(GEN,GEN,INTERVAL) STORAGE AMOUNT REDUCES DUE TO GENERATING AND INCREASES DUE TO PUMPING
Q_STORAGE_END(GEN) TO ENFORCE ENDING STORAGE LEVEL
Q_STORAGE_MAX(GEN,INTERVAL)  MAXIMUM AMOUNT OF STORAGE CAPABILITY
Q_STORAGE_MIN(GEN,INTERVAL)  MINIMUM AMOUNT OF STORAGE CAPABILITY
Q_STORAGE_RESERVEUP1(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR FOR INTERVAL 0
Q_STORAGE_RESERVEUP2(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR
Q_STORAGE_RESERVEDOWN1(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR FOR INTERVAL 0
Q_STORAGE_RESERVEDOWN2(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR
Q_STORAGE_GEN_EFFICIENCY9(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY9(GEN,INTERVAL)
;

*DECLARE RTSCED RESERVE SUSD EQUATIONS
EQUATIONS
Q_RESERVE_SUSD_TRAJECTORY(GEN,INTERVAL,RESERVETYPE)  CANT PROVIDE RESERVE IF STARTING OR STOPPING
;

*DECLARE RTSCED LOW LIMIT EQUATIONS
EQUATIONS
Q_GENLIMIT_LOW(GEN,INTERVAL)
Q_GENLIMIT_LOW2(GEN,INTERVAL)
Q_RAMP_RATE_UP(GEN,INTERVAL)
Q_RAMP_RATE_DOWN(GEN,INTERVAL)
Q_RAMP_RATE_UP_BASIC(GEN,INTERVAL)
Q_RAMP_RATE_DOWN_BASIC(GEN,INTERVAL)
Q_RAMP_RATE_UP_BASIC0(GEN,INTERVAL)
Q_RAMP_RATE_DOWN_BASIC0(GEN,INTERVAL)
***************************08/23/2022*******************************************
Q_GENLIMIT_LOW_NUC(GEN,INTERVAL)

$onText
Q_NUCLEAR_RAMPDOWN(GEN,INTERVAL)
Q_NUCLEAR_RAMPUP(GEN,INTERVAL)
$offText
Q_LTE_GEN(GEN,GEN,INTERVAL)
**************************************
$onText November 28,2022
Q_UNIVERSAL_NUCLEAR_SCHEDULE_UP(GEN,INTERVAL)
Q_INITIAL_NUCLEAR_SCHEDULE_UP(GEN,INTERVAL)
********************************************************************************
Q_UNIVERSAL_NUCLEAR_SCHEDULE_DN(GEN,INTERVAL)
Q_INITIAL_NUCLEAR_SCHEDULE_DN(GEN,INTERVAL)
**************************************
Q_NUCLEAR_RAMP_STABLE1(GEN,INTERVAL)
Q_NUCLEAR_RAMP_STABLE2(GEN,INTERVAL)
Q_NUCLEAR_RAMP_STABLE3(GEN,INTERVAL)
$offText
;
********************************************************************************
*DECLARE RTSCED 2 STORAGE EQUATIONS
EQUATIONS
Q_PUMP_RAMP_RATE_UP(GEN,INTERVAL)
Q_PUMP_RAMP_RATE_DOWN(GEN,INTERVAL)
Q_RESERVE_PUMP_SUSD_TRAJECTORY(GEN,INTERVAL,RESERVETYPE)
;


*     Define_Equations     *

Q_LOAD_BALANCE(INTERVAL)..
SUM(GEN,GEN_DELIVERY_FACTORS(GEN,INTERVAL)*(GEN_SCHEDULE(GEN,INTERVAL)-CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL)))
         =E= SUM(BUS,BUS_DELIVERY_FACTORS(BUS,INTERVAL)*LOAD(INTERVAL)*LOAD_DIST(BUS)) - LOSS_LOAD(INTERVAL) + ADDITIONAL_LOAD_SLACK(INTERVAL)  + LOSS_BIAS;

$onText
Q_THERMAL_LOAD_BALANCE(NUCLEAR_GEN,INTERVAL)..
(3/4)*(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL))*100+DH_LOSS_LOAD(INTERVAL)=G=DH_LOAD(INTERVAL)
;
$offText



$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES NET_ENERGY(BUS,INTERVAL) =E= SUM(GENBUS(BUS,GEN),(GEN_SCHEDULE(GEN,INTERVAL)-CONVENTIONAL_PUMP_SCHEDULE(GEN,INTERVAL))*INJECTION_FACTOR(BUS,GEN)) +
$IFI '%NETWORK_CHECK%' == YES          HVDC_CONTRIBUTION(BUS,INTERVAL) - LOAD_DIST(BUS)*(LOAD(INTERVAL)-LOSS_LOAD(INTERVAL)+ ADDITIONAL_LOAD_SLACK(INTERVAL));
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW(BRANCH_AC,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH_AC,INTERVAL) =E= SUM(BUS,PTDF(BRANCH_AC,BUS)*NET_ENERGY(BUS,INTERVAL))
$IFI '%NETWORK_CHECK%' == YES          + SUM(PAR,PTDF_PAR(BRANCH_AC,PAR)*PHASE_SHIFTER_ANGLE(PAR,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1(BRANCH,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH,INTERVAL) =L= BRANCHDATA(BRANCH,"LINE_RATING") + BRANCH_SLACK1(BRANCH,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2(BRANCH,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES LINEFLOW(BRANCH,INTERVAL) =G= -1*BRANCHDATA(BRANCH,"LINE_RATING") -BRANCH_SLACK2(BRANCH,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

Q_RESERVE_TOTAL(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE) =E= SUM(GEN,GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE))
         + SUM(R$(ORD(R) EQ RESERVEVALUE(RESERVETYPE,"RESERVE_INCLUSIVE")),TOTAL_RESERVE(INTERVAL,R))
;

Q_RESERVE_BALANCE(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE)         + INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
         =G= RESERVELEVEL(INTERVAL,RESERVETYPE)
;

Q_RESERVE_BALANCE2(INTERVAL,RESERVETYPE)..
TOTAL_RESERVE(INTERVAL,RESERVETYPE)         + INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)
         =L= RESERVELEVEL(INTERVAL,RESERVETYPE)*10000
;

Q_RESERVE_CAPABILITY(GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L=
         (UNIT_STATUS(GEN,INTERVAL) + PUMPING(GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 RESERVEVALUE(RESERVETYPE,"RESERVE_AGC")*GENVALUE(GEN,"AGC_QUALIFIED")
         + (UNIT_STATUS(GEN,INTERVAL) + PUMPING(GEN,INTERVAL))*RESERVEVALUE(RESERVETYPE,"RESERVE_ON")*GENVALUE(GEN,"RAMP_RATE")*RESERVEVALUE(RESERVETYPE,"RESERVE_TIME")*
                 (1-RESERVEVALUE(RESERVETYPE,"RESERVE_AGC"))
         + (1 - UNIT_STATUS(GEN,INTERVAL) - PUMPING(GEN,INTERVAL)) * (1 - RESERVEVALUE(RESERVETYPE,"RESERVE_ON")) * QSC(GEN,RESERVETYPE)
;

Q_RESERVE_RAMPUP_LIMIT(GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(GEN,INTERVAL)*GENVALUE(GEN,"RAMP_RATE") + PUMPING(GEN,INTERVAL)*STORAGEVALUE(GEN,"PUMP_RAMP_RATE")
;

Q_RESERVE_RAMPDOWN_LIMIT(GEN,INTERVAL)..
SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON") EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)/RESERVEVALUE(RESERVETYPE,"RESERVE_TIME"))
         =L= UNIT_STATUS(GEN,INTERVAL)*GENVALUE(GEN,"RAMP_RATE") + PUMPING(GEN,INTERVAL)*STORAGEVALUE(GEN,"PUMP_RAMP_RATE")
;

Q_RESERVE_CAPABILITY_VG(VARIABLE_GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(VARIABLE_GEN,INTERVAL,RESERVETYPE) =L= GENVALUE(VARIABLE_GEN,"CAPACITY")*RESERVEVALUE(RESERVETYPE,"RESERVE_VG")
;

Q_VARIABLE_RESERVE_CAPACITY(VARIABLE_GEN,INTERVAL)..
GEN_SCHEDULE(VARIABLE_GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(VARIABLE_GEN,INTERVAL,RESERVETYPE)) =L= VG_FORECAST(INTERVAL,VARIABLE_GEN)
;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE1(ADJUSTABLE_PAR,INTERVAL) =L= -1*BRANCHDATA(ADJUSTABLE_PAR,"PHASE_SHIFTER_ANGLE_LOW") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE2(ADJUSTABLE_PAR,INTERVAL) =L= BRANCHDATA(ADJUSTABLE_PAR,"PHASE_SHIFTER_ANGLE_HIGH") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3(ADJUSTABLE_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(ADJUSTABLE_PAR,INTERVAL) =E= -1*PHASE_SHIFTER_ANGLE1(ADJUSTABLE_PAR,INTERVAL) + PHASE_SHIFTER_ANGLE2(ADJUSTABLE_PAR,INTERVAL)
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4(FIXED_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(FIXED_PAR,INTERVAL) =L= BRANCHDATA(FIXED_PAR,"PHASE_SHIFTER_ANGLE_HIGH") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5(FIXED_PAR,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_ANGLE(FIXED_PAR,INTERVAL) =G= BRANCHDATA(FIXED_PAR,"PHASE_SHIFTER_ANGLE_LOW") * PI /180
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES PHASE_SHIFTER_CONTRIBUTION(BUS,INTERVAL) =E= SUM(BRANCHBUS(PAR,BUS3,BUS4)$(SAMEAS(BUS,BUS3)),PHASE_SHIFTER_ANGLE(PAR,INTERVAL)/(BRANCHDATA(PAR,"REACTANCE")))
$IFI '%NETWORK_CHECK%' == YES          - SUM(BRANCHBUS(PAR,BUS3,BUS4)$(SAMEAS(BUS,BUS4)),PHASE_SHIFTER_ANGLE(PAR,INTERVAL)/(BRANCHDATA(PAR,"REACTANCE")));
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%NETWORK_CHECK%' == YES Q_HVDC(BUS,INTERVAL)..
$IFI '%NETWORK_CHECK%' == YES HVDC_CONTRIBUTION(BUS,INTERVAL) =E= SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS3)), -1*LINEFLOW(HVDC,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES          + SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS4)),LINEFLOW(HVDC,INTERVAL) )
$IFI '%NETWORK_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC(CTGC_BRANCH,BRANCH_AC,INTERVAL)$(DIAG(BRANCH_AC,CTGC_BRANCH) EQ 0)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH_AC,INTERVAL) =E= LINEFLOW(BRANCH_AC,INTERVAL) + LODF(CTGC_BRANCH,BRANCH_AC)*LINEFLOW(CTGC_BRANCH,INTERVAL)
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC2(CTGC_BRANCH,BRANCH,INTERVAL)$(SAMEAS(BRANCH,CTGC_BRANCH) )..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =E= 0
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC(CTGC_BRANCH,PAR,INTERVAL)$(SAMEAS(PAR,CTGC_BRANCH))..
$IFI '%CONTINGENCY_CHECK%' == YES PHASE_SHIFTER_ANGLE_CTGC(CTGC_BRANCH,PAR,INTERVAL) =E= 0
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_PAR_CTGC2(CTGC_BRANCH,PAR,INTERVAL)$(DIAG(PAR,CTGC_BRANCH) EQ 0)..
$IFI '%CONTINGENCY_CHECK%' == YES PHASE_SHIFTER_ANGLE_CTGC(CTGC_BRANCH,PAR,INTERVAL) =E= PHASE_SHIFTER_ANGLE(PAR,INTERVAL)
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_HVDC_CTGC(CTGC_BRANCH,BUS,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES HVDC_CONTRIBUTION_OFFSET_CTGC(CTGC_BRANCH,BUS,INTERVAL) =E= SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS3) AND SAMEAS(CTGC_BRANCH,HVDC)), -1*LINEFLOW(HVDC,INTERVAL) )
$IFI '%CONTINGENCY_CHECK%' == YES          + SUM(BRANCHBUS(HVDC,BUS3,BUS4)$(SAMEAS(BUS,BUS4)AND SAMEAS(CTGC_BRANCH,HVDC)),LINEFLOW(HVDC,INTERVAL) )
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC(CTGC_BRANCH,BRANCH,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =L= BRANCHDATA(BRANCH,"STE_RATING")
$IFI '%CONTINGENCY_CHECK%' == YES ;

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC(CTGC_BRANCH,BRANCH,INTERVAL)..
$IFI '%CONTINGENCY_CHECK%' == YES LINEFLOW_CTGC(CTGC_BRANCH,BRANCH,INTERVAL) =G= -1*BRANCHDATA(BRANCH,"STE_RATING")
$IFI '%CONTINGENCY_CHECK%' == YES ;

Q_PUMPMAXLIMIT(STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) =L= STORAGEVALUE(STORAGE_GEN,"MAX_PUMP")*PUMPING(STORAGE_GEN,INTERVAL)
;

$onText on 12/14/2022
Q_PUMPMINLIMIT(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL) =G= STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;
$offText

Q_PUMPMINLIMIT(ESR,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL) =G= STORAGEVALUE(ESR,"MIN_PUMP")*PUMPING(ESR,INTERVAL)
;

Q_PUMPMINLIMIT2(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL) -
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)) =G=         0
         + PUMPING(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
         - UNIT_STATUS(MIN_GEN_CONVENTIONAL_STORAGE_GEN,INTERVAL)*GENVALUE(MIN_GEN_CONVENTIONAL_STORAGE_GEN,"CAPACITY")
;

Q_PUMPMAXLIMIT2(STORAGE_GEN,INTERVAL)..
CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) +
         SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE))  =L=
         STORAGEVALUE(STORAGE_GEN,"MAX_PUMP")*PUMPING(STORAGE_GEN,INTERVAL) + UNIT_STATUS(STORAGE_GEN,INTERVAL)*GENVALUE(STORAGE_GEN,"CAPACITY")
;
*************************************08/23/22***********************************
Q_STORAGE_GENERATING_START(STORAGE_GEN,"FC1",INTERVAL)$(ORD(INTERVAL) EQ 1)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =E= STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_EFFICIENCY("FC1",INTERVAL)
         + INTERVAL_MINUTES(INTERVAL)/60*PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_GENERATING(STORAGE_GEN,"FC1",INTERVAL)$(ORD(INTERVAL) GT 1)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =E= STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
         - INTERVAL_MINUTES(INTERVAL)/60*GEN_EFFICIENCY("FC1",INTERVAL)
         + INTERVAL_MINUTES(INTERVAL)/60*PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL)
;
********************************************************************************
Q_STORAGE_END(STORAGE_GEN)$(STORAGEVALUE(STORAGE_GEN,"ENFORCE_FINAL_STORAGE") EQ 1)..
SUM(INTERVAL$(ORD(INTERVAL) EQ CARD(INTERVAL)),STORAGE_LEVEL(STORAGE_GEN,INTERVAL)) =E= STORAGEVALUE(STORAGE_GEN,"FINAL_STORAGE") + END_STORAGE_PENALTY_PLUS(STORAGE_GEN) - END_STORAGE_PENALTY_MINUS(STORAGE_GEN)
;

Q_STORAGE_MAX(STORAGE_GEN,INTERVAL)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX")*100
;

Q_STORAGE_MIN(STORAGE_GEN,INTERVAL)..
STORAGE_LEVEL(STORAGE_GEN,INTERVAL) =G= 0
;
************************************08/23/2022**********************************
$onText
Q_STORAGE_GEN_EFFICIENCY9(STORAGE_GEN,INTERVAL)..
GEN_EFFICIENCY(STORAGE_GEN,INTERVAL) =E= GEN_SCHEDULE(STORAGE_GEN,INTERVAL)
;
$offText

Q_STORAGE_GEN_EFFICIENCY9("FC1",INTERVAL)..
GEN_EFFICIENCY("FC1",INTERVAL) =E= GEN_SCHEDULE("FC1",INTERVAL)*100*1000/33
;
$onText
Q_STORAGE_PUMP_EFFICIENCY9(STORAGE_GEN,INTERVAL)..
PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL) =E= STORAGEVALUE(STORAGE_GEN,"EFFICIENCY")*CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL)
;
$offText
Q_STORAGE_PUMP_EFFICIENCY9(STORAGE_GEN,INTERVAL)..
PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL) =E= CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL)*100*1000/55
;
********************************************************************************
Q_STORAGE_RESERVEUP1(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) GT 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
         + CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) + WASTED_STORAGE(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_RESERVEUP2(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) EQ 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")
         + CONVENTIONAL_PUMP_SCHEDULE(STORAGE_GEN,INTERVAL) + WASTED_STORAGE(STORAGE_GEN,INTERVAL)
;

Q_STORAGE_RESERVEDOWN1(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) GT 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX") - STORAGE_LEVEL(STORAGE_GEN,INTERVAL-1)
;

Q_STORAGE_RESERVEDOWN2(STORAGE_GEN,INTERVAL,RESERVETYPE)$((ORD(INTERVAL) EQ 1) AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3))..
GEN_RESERVE_SCHEDULE(STORAGE_GEN,INTERVAL,RESERVETYPE)*INTERVAL_LENGTH =L= STORAGEVALUE(STORAGE_GEN,"STORAGE_MAX") - STORAGEVALUE(STORAGE_GEN,"INITIAL_STORAGE")
;

OBJECTIVE..
PRODCOST =E= SUM(INTERVAL,PRODCOST_BY_INTERVAL(INTERVAL))
$IFI '%NETWORK_CHECK%' == YES                + SUM(INTERVAL,SUM(BRANCH, PHASE_SHIFTER_ANGLE1(BRANCH,INTERVAL)*.005 + PHASE_SHIFTER_ANGLE2(BRANCH,INTERVAL)*.005) )
;
************* Modified on November 08,2020
OBJECTIVEB(INTERVAL)..
PRODCOST_BY_INTERVAL(INTERVAL) =E=
                 SUM(GEN,
                         SUM(GENBLOCK(GEN,BLOCK),
                                 BLOCK_COST(GEN,BLOCK)*(INTERVAL_MINUTES(INTERVAL)/60)*GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)*SYSTEMVALUE("MVA_PERUNIT")
                        )
                         + (INTERVAL_MINUTES(INTERVAL)/60)*(RAMP_DOWN_PENALTY(GEN,INTERVAL)+RAMP_UP_PENALTY(GEN,INTERVAL))*SYSTEMVALUE("VOIRAMP")*SYSTEMVALUE("MVA_PERUNIT")

                         + WASTED_STORAGE(GEN,INTERVAL)*SYSTEMVALUE("VOLL")*SYSTEMVALUE("MVA_PERUNIT")
                         -(SUM(STORAGE_GEN,PUMP_EFFICIENCY(STORAGE_GEN,INTERVAL))*16)
                 ) +
                 (INTERVAL_MINUTES(INTERVAL)/60)*(LOSS_LOAD(INTERVAL)+ADDITIONAL_LOAD_SLACK(INTERVAL))*SYSTEMVALUE("VOLL")*SYSTEMVALUE("MVA_PERUNIT")
*                 +  (INTERVAL_MINUTES(INTERVAL)/60)*(DH_LOSS_LOAD(INTERVAL))*400+
                 +SUM(RESERVETYPE,
                         (INTERVAL_MINUTES(INTERVAL)/60)*INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)*RESERVEVALUE(RESERVETYPE,"VOIR")*SYSTEMVALUE("MVA_PERUNIT")
                 )+ SUM(ACTIVE_GEN,SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(ACTIVE_GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(ACTIVE_GEN,RESERVETYPE)*(INTERVAL_MINUTES(INTERVAL)/60)*SYSTEMVALUE("MVA_PERUNIT")))
                 + SUM(HES_GEN,SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(HES_GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(HES_GEN,RESERVETYPE)*(INTERVAL_MINUTES(INTERVAL)/60)*SYSTEMVALUE("MVA_PERUNIT")))
;
*************************************
*OBJECTIVEB(INTERVAL)..
*PRODCOST_BY_INTERVAL(INTERVAL) =E=
*                 SUM(GEN,
*                         SUM(GENBLOCK(GEN,BLOCK),
*                                 BLOCK_COST(GEN,BLOCK)*(INTERVAL_MINUTES(INTERVAL)/60)*GEN_BLOCK_SCHEDULE(GEN,BLOCK,INTERVAL)*SYSTEMVALUE("MVA_PERUNIT")
*                        )
*                         + (INTERVAL_MINUTES(INTERVAL)/60)*(RAMP_DOWN_PENALTY(GEN,INTERVAL)+RAMP_UP_PENALTY(GEN,INTERVAL))*SYSTEMVALUE("VOIRAMP")*SYSTEMVALUE("MVA_PERUNIT")
*                         + SUM(RESERVETYPE,GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE)*RESERVE_COST(GEN,RESERVETYPE)*(INTERVAL_MINUTES(INTERVAL)/60)*SYSTEMVALUE("MVA_PERUNIT"))
*                         + WASTED_STORAGE(GEN,INTERVAL)*SYSTEMVALUE("VOLL")*SYSTEMVALUE("MVA_PERUNIT")
*                 ) +
*                 (INTERVAL_MINUTES(INTERVAL)/60)*(LOSS_LOAD(INTERVAL)+ADDITIONAL_LOAD_SLACK(INTERVAL))*SYSTEMVALUE("VOLL")*SYSTEMVALUE("MVA_PERUNIT")
*                 +
*                 SUM(RESERVETYPE,
*                         (INTERVAL_MINUTES(INTERVAL)/60)*INSUFFICIENT_RESERVE(INTERVAL,RESERVETYPE)*RESERVEVALUE(RESERVETYPE,"VOIR")*SYSTEMVALUE("MVA_PERUNIT")
*                 )
*;

Q_GENTOTAL(AVAILABLE_GEN,INTERVAL)..
GEN_SCHEDULE(AVAILABLE_GEN,INTERVAL) =E= SUM(GENBLOCK(G,BLOCK)$(SAMEAS(AVAILABLE_GEN,G)),GEN_BLOCK_SCHEDULE(G,BLOCK,INTERVAL))
;

Q_GEN_BLOCK_LIMIT1(GENBLOCK(AVAILABLE_GEN,BLOCK),INTERVAL)$(ORD(BLOCK) EQ 1)..
GEN_BLOCK_SCHEDULE(AVAILABLE_GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(AVAILABLE_GEN,BLOCK)
;

Q_GEN_BLOCK_LIMIT2(GENBLOCK(AVAILABLE_GEN,BLOCK),INTERVAL)$(ORD(BLOCK) GT 1)..
GEN_BLOCK_SCHEDULE(AVAILABLE_GEN,BLOCK,INTERVAL) =L= BLOCK_CAP(AVAILABLE_GEN,BLOCK) - BLOCK_CAP(AVAILABLE_GEN,BLOCK-1)
;

Q_GENLIMIT_HIGH(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) =L=    GENVALUE(GEN,"CAPACITY")*UNIT_STATUS(GEN,INTERVAL)
;

Q_GENLIMIT_HIGH2(GEN,INTERVAL)..
GEN_SCHEDULE(GEN,INTERVAL) + SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE))
         =L= (UNIT_STATUS(GEN,INTERVAL)+ PUMPING(GEN,INTERVAL))*GENVALUE(GEN,"CAPACITY")
;

* Since we have used a minimum capacity constraints for nuclear so I am restricting the following two constraints only applicable to non-nuclear generator
$onText
Q_GENLIMIT_LOW(MIN_GEN_GEN,INTERVAL)..
GEN_SCHEDULE(MIN_GEN_GEN,INTERVAL) =G= GENVALUE(MIN_GEN_GEN,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN,INTERVAL)
         - UNIT_STARTINGUP(MIN_GEN_GEN,INTERVAL) - UNIT_SHUTTINGDOWN(MIN_GEN_GEN,INTERVAL))
         + UNIT_STARTINGUP(MIN_GEN_GEN,INTERVAL)*MIN(GENVALUE(MIN_GEN_GEN,"MIN_GEN"),(UNIT_STARTUPMINGENHELP(MIN_GEN_GEN,"1")*PROD(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTINGUP(MIN_GEN_GEN,H))+
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN) + 1),GENVALUE(MIN_GEN_GEN,"MIN_GEN")*UNIT_STARTINGUP(MIN_GEN_GEN,H)*(MIN(1,INTERVAL_MINUTES(H)/(60*GENVALUE(MIN_GEN_GEN,"STARTUP_TIME")))))))
;

Q_GENLIMIT_LOW2(MIN_GEN_GEN,INTERVAL)..
GEN_SCHEDULE(MIN_GEN_GEN,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN,"MIN_GEN")*MAX(0,(UNIT_STATUS(MIN_GEN_GEN,INTERVAL)-UNIT_STARTINGUP(MIN_GEN_GEN,INTERVAL)-UNIT_SHUTTINGDOWN(MIN_GEN_GEN,INTERVAL)))
         + UNIT_STARTINGUP(MIN_GEN_GEN,INTERVAL)*MIN(GENVALUE(MIN_GEN_GEN,"MIN_GEN"),(UNIT_STARTUPMINGENHELP(MIN_GEN_GEN,"1")*PROD(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTINGUP(MIN_GEN_GEN,H))+
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN) + 1),GENVALUE(MIN_GEN_GEN,"MIN_GEN")*UNIT_STARTINGUP(MIN_GEN_GEN,H)*(MIN(1,INTERVAL_MINUTES(H)/(60*GENVALUE(MIN_GEN_GEN,"STARTUP_TIME")))))))
         - PUMPING(MIN_GEN_GEN,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN,"MAX_PUMP")
;
$offText
********************************************************************************
Q_GENLIMIT_LOW(MIN_GEN_GEN_NONUC,INTERVAL)..
GEN_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL) =G= GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*(UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL)
         - UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,INTERVAL) - UNIT_SHUTTINGDOWN(MIN_GEN_GEN_NONUC,INTERVAL))
         + UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,INTERVAL)*MIN(GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN"),(UNIT_STARTUPMINGENHELP(MIN_GEN_GEN_NONUC,"1")*PROD(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,H))+
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC) + 1),GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,H)*(MIN(1,INTERVAL_MINUTES(H)/(60*GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME")))))))
;

Q_GENLIMIT_LOW2(MIN_GEN_GEN_NONUC,INTERVAL)..
GEN_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL)
         - SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 2 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(MIN_GEN_GEN_NONUC,INTERVAL,RESERVETYPE)) =G= GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*MAX(0,(UNIT_STATUS(MIN_GEN_GEN_NONUC,INTERVAL)-UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,INTERVAL)-UNIT_SHUTTINGDOWN(MIN_GEN_GEN_NONUC,INTERVAL)))
         + UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,INTERVAL)*MIN(GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN"),(UNIT_STARTUPMINGENHELP(MIN_GEN_GEN_NONUC,"1")*PROD(H$(ORD(H) LE ORD(INTERVAL)),UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,H))+
         SUM(H$(ORD(H) LE ORD(INTERVAL) AND ORD(H) GE ORD(INTERVAL) - STARTUP_PERIOD(MIN_GEN_GEN_NONUC) + 1),GENVALUE(MIN_GEN_GEN_NONUC,"MIN_GEN")*UNIT_STARTINGUP(MIN_GEN_GEN_NONUC,H)*(MIN(1,INTERVAL_MINUTES(H)/(60*GENVALUE(MIN_GEN_GEN_NONUC,"STARTUP_TIME")))))))
         - PUMPING(MIN_GEN_GEN_NONUC,INTERVAL)*STORAGEVALUE(MIN_GEN_GEN_NONUC,"MAX_PUMP")
;
********************************************************************************
$onText
Q_RAMP_RATE_UP(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1)
         =L= INTERVAL_MINUTES(INTERVAL)*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
         *(UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL)-UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL))
         + GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,(INTERVAL_MINUTES(INTERVAL)/(60*GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))))*UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL)
         + MAX(0,INTERVAL_MINUTES(INTERVAL) - 60*GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL)
         + RAMP_UP_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;

Q_RAMP_RATE_DOWN(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL-1)
         =G= -1*INTERVAL_MINUTES(INTERVAL)*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
         *(UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL-1)-UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL))
         - (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,(INTERVAL_MINUTES(INTERVAL)/(GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")*60))*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL))
         + MAX(0,INTERVAL_MINUTES(INTERVAL) - (GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")*60))*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL))
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)
;
$offText
********************************************************************************
Q_RAMP_RATE_UP(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1)
         =L= INTERVAL_MINUTES(INTERVAL)*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
         *(UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL)-UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))
         + GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,(INTERVAL_MINUTES(INTERVAL)/(60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))))*UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL)
         + MAX(0,INTERVAL_MINUTES(INTERVAL) - 60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL)
         + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;

Q_RAMP_RATE_DOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL-1)
         =G= -1*INTERVAL_MINUTES(INTERVAL)*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
         *(UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL-1)-UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL))
         - (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,(INTERVAL_MINUTES(INTERVAL)/(GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")*60))*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL))
         + MAX(0,INTERVAL_MINUTES(INTERVAL) - (GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")*60))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL))
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;

********************************************************************************

Q_VARIABLE_FORECAST(VARIABLE_CAPACITY_RESOURCE,INTERVAL)..
GEN_SCHEDULE(VARIABLE_CAPACITY_RESOURCE,INTERVAL) =L= VG_FORECAST(INTERVAL,VARIABLE_CAPACITY_RESOURCE)*UNIT_STATUS(VARIABLE_CAPACITY_RESOURCE,INTERVAL) + GENVALUE(VARIABLE_CAPACITY_RESOURCE,"PERUNIT_COST")*GENVALUE(VARIABLE_CAPACITY_RESOURCE,"CAPACITY")
;

Q_RAMP_RATE_UP_BASIC(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1)
         =L= GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*INTERVAL_MINUTES(INTERVAL)*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;

Q_RAMP_RATE_UP_BASIC0(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP)
         =L= GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*INTERVAL_MINUTES(INTERVAL)*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;

Q_RAMP_RATE_DOWN_BASIC(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) GT 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1)
         =G= -1*GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*INTERVAL_MINUTES(INTERVAL)*UNIT_STATUS(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL-1) - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;

Q_RAMP_RATE_DOWN_BASIC0(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN_NOSTARTUP)
         =G= -1*GENVALUE(RAMP_LIMITED_GEN_NOSTARTUP,"RAMP_RATE")*INTERVAL_MINUTES(INTERVAL)*LAST_STATUS(RAMP_LIMITED_GEN_NOSTARTUP) - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NOSTARTUP,INTERVAL)
;
**********************************Candidate Constraints*************************
$onText
Q_RAMP_RATE_UP0_BP(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN) =L= (INTERVAL_UPDATE*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE") + RAMP_SLACK_UP(RAMP_LIMITED_GEN))*
         (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL) - UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL))
         + (UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL)*
                 (GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")*MIN(1,INTERVAL_UPDATE/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_UPDATE - GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
                 )
           )
         + GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_BP") + RAMP_UP_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
;

Q_RAMP_RATE_DOWN0_BP(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN) =G= (-1*INTERVAL_UPDATE*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
         - RAMP_SLACK_DOWN(RAMP_LIMITED_GEN) )*(MAX(0,LAST_STATUS(RAMP_LIMITED_GEN) - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)))
         - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)*
                 (MIN(1,(INTERVAL_UPDATE/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")
                 + MAX(0,INTERVAL_UPDATE - GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
                 )
         - GEN_FORCED_OUT(RAMP_LIMITED_GEN)*GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")
         - GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_BP")
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)
;

Q_RAMP_RATE_UP0_ACTUAL(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - ACTUAL_GEN_OUTPUT(RAMP_LIMITED_GEN) =L= (PROCESS_TIME+INTERVAL_LENGTH)*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*
         (UNIT_STATUS(RAMP_LIMITED_GEN,INTERVAL) - (MIN(1,UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL)+UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN))))
          + (UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL))*
                 (MIN(1,(PROCESS_TIME+INTERVAL_LENGTH)/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")
            )
          + (MIN(1,UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL)+UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN))*
                 MAX(0,(PROCESS_TIME+INTERVAL_LENGTH) - GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
            )
          + (MAX(0,UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN)-UNIT_STARTINGUP(RAMP_LIMITED_GEN,INTERVAL))*
                 MIN(1,(60*PROCESS_TIME/GENVALUE(RAMP_LIMITED_GEN,"STARTUP_TIME")))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")   + INTERVAL_LENGTH*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")
            )
         + GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")   + RAMP_UP_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
         - MIN(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN)-LAST_STATUS(RAMP_LIMITED_GEN))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN");
;

Q_RAMP_RATE_DOWN0_ACTUAL(RAMP_LIMITED_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN,INTERVAL) - ACTUAL_GEN_OUTPUT(RAMP_LIMITED_GEN) =G= -1*(INTERVAL_LENGTH)*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*
                 (MAX(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN) - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)))
         -1*(PROCESS_TIME)*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE")*
                 (LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN) - UNIT_SHUTTINGDOWN_ACTUAL(RAMP_LIMITED_GEN))
         - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN,INTERVAL)*
                 ((MIN(1,(INTERVAL_LENGTH)/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")
                  + (MAX(0,(INTERVAL_LENGTH)-GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")))*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE"))
         - UNIT_SHUTTINGDOWN_ACTUAL(RAMP_LIMITED_GEN)*
                 ((MIN(1,(PROCESS_TIME)/GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN,"MIN_GEN")
                  + (MAX(0,(PROCESS_TIME)-GENVALUE(RAMP_LIMITED_GEN,"SHUTDOWN_TIME")))*60*GENVALUE(RAMP_LIMITED_GEN,"RAMP_RATE"))
          - GEN_FORCED_OUT(RAMP_LIMITED_GEN)*GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")
          - GENVALUE(RAMP_LIMITED_GEN,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")
          - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN,INTERVAL)
          - MAX(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN)-LAST_STATUS(RAMP_LIMITED_GEN))*GENVALUE(RAMP_LIMITED_GEN,"CAPACITY");
;
$offText
********************************************************************************
Q_RAMP_RATE_UP0_BP(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC) =L= (INTERVAL_UPDATE*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE") + RAMP_SLACK_UP(RAMP_LIMITED_GEN_NONUC))*
         (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL) - UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))
         + (UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL)*
                 (GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")*MIN(1,INTERVAL_UPDATE/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))
                 + MAX(0,INTERVAL_UPDATE - GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
                 )
           )
         + GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_BP") + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;

Q_RAMP_RATE_DOWN0_BP(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - LAST_GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC) =G= (-1*INTERVAL_UPDATE*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
         - RAMP_SLACK_DOWN(RAMP_LIMITED_GEN_NONUC) )*(MAX(0,LAST_STATUS(RAMP_LIMITED_GEN_NONUC) - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)))
         - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)*
                 (MIN(1,(INTERVAL_UPDATE/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")
                 + MAX(0,INTERVAL_UPDATE - GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
                 )
         - GEN_FORCED_OUT(RAMP_LIMITED_GEN_NONUC)*GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")
         - GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_BP")
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)*UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)
;

Q_RAMP_RATE_UP0_ACTUAL(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - ACTUAL_GEN_OUTPUT(RAMP_LIMITED_GEN_NONUC) =L= (PROCESS_TIME+INTERVAL_LENGTH)*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*
         (UNIT_STATUS(RAMP_LIMITED_GEN_NONUC,INTERVAL) - (MIN(1,UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL)+UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN_NONUC))))
          + (UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))*
                 (MIN(1,(PROCESS_TIME+INTERVAL_LENGTH)/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")
            )
          + (MIN(1,UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL)+UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN_NONUC))*
                 MAX(0,(PROCESS_TIME+INTERVAL_LENGTH) - GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME"))*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
            )
          + (MAX(0,UNIT_STARTINGUP_ACTUAL(RAMP_LIMITED_GEN_NONUC)-UNIT_STARTINGUP(RAMP_LIMITED_GEN_NONUC,INTERVAL))*
                 MIN(1,(60*PROCESS_TIME/GENVALUE(RAMP_LIMITED_GEN_NONUC,"STARTUP_TIME")))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")   + INTERVAL_LENGTH*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")
            )
         + GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")   + RAMP_UP_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
         - MIN(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN_NONUC)-LAST_STATUS(RAMP_LIMITED_GEN_NONUC))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN");
;

Q_RAMP_RATE_DOWN0_ACTUAL(RAMP_LIMITED_GEN_NONUC,INTERVAL)$(ORD(INTERVAL) EQ 1)..
GEN_SCHEDULE(RAMP_LIMITED_GEN_NONUC,INTERVAL) - ACTUAL_GEN_OUTPUT(RAMP_LIMITED_GEN_NONUC) =G= -1*(INTERVAL_LENGTH)*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*
                 (MAX(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN_NONUC) - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)))
         -1*(PROCESS_TIME)*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE")*
                 (LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN_NONUC) - UNIT_SHUTTINGDOWN_ACTUAL(RAMP_LIMITED_GEN_NONUC))
         - UNIT_SHUTTINGDOWN(RAMP_LIMITED_GEN_NONUC,INTERVAL)*
                 ((MIN(1,(INTERVAL_LENGTH)/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")
                  + (MAX(0,(INTERVAL_LENGTH)-GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")))*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE"))
         - UNIT_SHUTTINGDOWN_ACTUAL(RAMP_LIMITED_GEN_NONUC)*
                 ((MIN(1,(PROCESS_TIME)/GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"MIN_GEN")
                  + (MAX(0,(PROCESS_TIME)-GENVALUE(RAMP_LIMITED_GEN_NONUC,"SHUTDOWN_TIME")))*60*GENVALUE(RAMP_LIMITED_GEN_NONUC,"RAMP_RATE"))
          - GEN_FORCED_OUT(RAMP_LIMITED_GEN_NONUC)*GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")
          - GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")
          - RAMP_DOWN_PENALTY(RAMP_LIMITED_GEN_NONUC,INTERVAL)
          - MAX(0,LAST_STATUS_ACTUAL(RAMP_LIMITED_GEN_NONUC)-LAST_STATUS(RAMP_LIMITED_GEN_NONUC))*GENVALUE(RAMP_LIMITED_GEN_NONUC,"CAPACITY");
;
********************************************************************************
Q_PUMP_RAMP_RATE_UP0_BP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - LAST_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) =L=
         (INTERVAL_UPDATE*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE") + RAMP_SLACK_UP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))
         *(PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))
         + (UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
         *(INTERVAL_UPDATE/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
         + STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*INITIAL_DISPATCH_SLACK("IGNORE_BP") + RAMP_UP_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_PUMP_RAMP_RATE_DOWN0_BP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - LAST_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) =G=
         (-1*INTERVAL_UPDATE*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         - RAMP_SLACK_DOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) )*(LAST_PUMPSTATUS(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)
         - UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))
         - UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         *MIN(1,(INTERVAL_UPDATE/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
         - MAX(0,INTERVAL_UPDATE - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - GEN_FORCED_OUT(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")
         - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*INITIAL_DISPATCH_SLACK("IGNORE_BP") - RAMP_DOWN_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)*UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_PUMP_RAMP_RATE_UP0_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - ACTUAL_PUMP_OUTPUT(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) =L=
         (PROCESS_TIME+INTERVAL_LENGTH)*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         *(PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - (MIN(1,UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)+UNIT_PUMPINGUP_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))))
         + ((MIN(1,UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)+UNIT_PUMPINGUP_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
         *((PROCESS_TIME+INTERVAL_LENGTH)/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME"))
         + STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")   + RAMP_UP_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL);
;

Q_PUMP_RAMP_RATE_DOWN0_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) EQ 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - ACTUAL_PUMP_OUTPUT(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) =G= -1*(PROCESS_TIME+INTERVAL_LENGTH)*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         *(LAST_PUMPSTATUS_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN) - MIN(1,UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)+UNIT_PUMPINGDOWN_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)))
         - MIN(1,UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)+UNIT_PUMPINGDOWN_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))
         *((MIN(1,(PROCESS_TIME+INTERVAL_LENGTH)/STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")
                 + ((PROCESS_TIME+INTERVAL_LENGTH)-STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME"))*60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE"))
          - GEN_FORCED_OUT(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")
          - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*INITIAL_DISPATCH_SLACK("IGNORE_ACTUAL")
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)*MIN(1,UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)+UNIT_PUMPINGDOWN_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))
                  - MAX(0,LAST_PUMPSTATUS_ACTUAL(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN)-LAST_STATUS(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")/MAX(1,STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")/INTERVAL_LENGTH);
;
* I think the following constraint can go without modification
Q_RESERVE_SUSD_TRAJECTORY(GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(GEN,INTERVAL,RESERVETYPE) =L=
         GENVALUE(GEN,"CAPACITY")*(1 - UNIT_STARTINGUP(GEN,INTERVAL) - UNIT_SHUTTINGDOWN(GEN,INTERVAL))
;

Q_RESERVE_PUMP_SUSD_TRAJECTORY(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE(CONVENTIONAL_STORAGE_GEN,INTERVAL,RESERVETYPE) =L=
         STORAGEVALUE(CONVENTIONAL_STORAGE_GEN,"MAX_PUMP")*(1 - UNIT_PUMPINGUP(CONVENTIONAL_STORAGE_GEN,INTERVAL) - UNIT_PUMPINGDOWN(CONVENTIONAL_STORAGE_GEN,INTERVAL))
;

Q_PUMP_RAMP_RATE_UP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)
         =L= INTERVAL_MINUTES(INTERVAL)*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         *(PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)-UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))
         + UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,INTERVAL_MINUTES(INTERVAL)/(60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME")))
         + UNIT_PUMPINGUP(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)*MAX(0,INTERVAL_MINUTES(INTERVAL)-(60*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_STARTUP_TIME")))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         + RAMP_UP_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;

Q_PUMP_RAMP_RATE_DOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)$(ORD(INTERVAL) GT 1)..
CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL) - CONVENTIONAL_PUMP_SCHEDULE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)
         =G= -1*INTERVAL_MINUTES(INTERVAL)*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")
         *(PUMPING(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL-1)-UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))
         - STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"MIN_PUMP")*MIN(1,(INTERVAL_MINUTES(INTERVAL)/(STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")*60))*UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL))
         - MAX(0,INTERVAL_MINUTES(INTERVAL) - (STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_SHUTDOWN_TIME")*60))*STORAGEVALUE(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,"PUMP_RAMP_RATE")*UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
         - RAMP_DOWN_PENALTY(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)*UNIT_PUMPINGDOWN(RAMP_LIMITED_CONVENTIONAL_STORAGE_GEN,INTERVAL)
;
*************************************08/23/2022*********************************
Q_GENLIMIT_LOW_NUC(NUCLEAR_GEN,INTERVAL)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL) =G= UNIT_STATUS(NUCLEAR_GEN,INTERVAL)*GENVALUE(NUCLEAR_GEN,"MIN_GEN")

         +SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NUCLEAR_GEN,INTERVAL,RESERVETYPE))
;
Q_DISABLE_FC_RESERVE("FC1",INTERVAL,RESERVETYPE)..
GEN_RESERVE_SCHEDULE("FC1",INTERVAL,RESERVETYPE)=E=0;
$onText
JR: I think we should not specify whether a nuclear plant should ramp up mode or ramp down mode in the RTSCED model; because that's where the plant should choose its
dispatch level; the only thing we need to ensure that it is in the stable output level when it is supposed to be. So, we need an extra constraint that ensures it with the
choice of NUCLEAR_STABLE flag
$offText
$onText
*09/08/2022
Q_NUCLEAR_RAMPDOWN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT 2)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
;
Q_NUCLEAR_RAMPUP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT 2)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)
;
$offText
********************************************************************************

$onText 11/29
* This constraint is for the periods where the current stable status flag is greater than the previous one
Q_NUCLEAR_RAMP_STABLE1(NUCLEAR_GEN,INTERVAL)$( (ORD(INTERVAL) GT 1) AND ( NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL)>NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1) )  )..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL)-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1))
*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
;

* This constraint is for the periods where the current stable status flag is less than the previous one
Q_NUCLEAR_RAMP_STABLE2(NUCLEAR_GEN,INTERVAL)$( (ORD(INTERVAL) GT 1) AND ( NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL)<NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1) )  )..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)=l= GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1)-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))
*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
;

Q_NUCLEAR_RAMP_STABLE3(NUCLEAR_GEN,INTERVAL)$( (ORD(INTERVAL) GT 1) AND ( NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL) EQ 1) AND (NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1) EQ 1) )..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1)=E=0;
* But this will not work if both the interval values are zero
*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH*(NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL-1)-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))
*NUCLEAR_RAMP_DN(NUCLEAR_GEN,INTERVAL)- .0001*NUCLEAR_RAMP_UP(NUCLEAR_GEN,INTERVAL)
*;
$offText

Q_LTE_GEN(NUCLEAR_GEN,ESR,INTERVAL)..
GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)+SUM(RESERVETYPE$(RESERVEVALUE(RESERVETYPE,"RESERVE_ON")EQ 1 AND (RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 1 OR RESERVEVALUE(RESERVETYPE,"RESERVE_DIR") EQ 3)),
         GEN_RESERVE_SCHEDULE(NUCLEAR_GEN,INTERVAL,RESERVETYPE))=L= UNIT_STATUS(NUCLEAR_GEN,INTERVAL)*GENVALUE(NUCLEAR_GEN,"CAPACITY")
*-CONVENTIONAL_PUMP_SCHEDULE(ESR,INTERVAL)
;

********************************************************************************10/13/2022***********************************************
$onText 11/29
Q_UNIVERSAL_NUCLEAR_SCHEDULE_UP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1))=l=(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
Q_INITIAL_NUCLEAR_SCHEDULE_UP(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=l=(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
********************************************************************************
Q_UNIVERSAL_NUCLEAR_SCHEDULE_DN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) GT  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL-1))=G=-1*(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
Q_INITIAL_NUCLEAR_SCHEDULE_DN(NUCLEAR_GEN,INTERVAL)$(ORD(INTERVAL) EQ  1 )..
(GEN_SCHEDULE(NUCLEAR_GEN,INTERVAL)-GENVALUE(NUCLEAR_GEN,"INITIAL_MW"))=G=-1*(1-NUCLEAR_STABLE(NUCLEAR_GEN,INTERVAL))*GENVALUE(NUCLEAR_GEN,"RAMP_RATE")*60*INTERVAL_LENGTH
;
$offText
********************************************************************************
*     Define_Model     *

MODEL RTD /OBJECTIVE
OBJECTIVEB
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_HVDC
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW
$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY
Q_LOAD_BALANCE
*Q_THERMAL_LOAD_BALANCE
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2
Q_RESERVE_TOTAL
Q_RESERVE_BALANCE
Q_GENTOTAL
Q_GEN_BLOCK_LIMIT1
Q_GEN_BLOCK_LIMIT2
Q_GENLIMIT_HIGH
Q_GENLIMIT_HIGH2
*********************************08/23/2022*************************************
Q_GENLIMIT_LOW
Q_GENLIMIT_LOW2
********************************************************************************
*These two are not present in RTSCUC need to be checked (may want to change the defining index sets ton NONUC plant only)
Q_RAMP_RATE_UP
Q_RAMP_RATE_DOWN

Q_VARIABLE_FORECAST
Q_VARIABLE_RESERVE_CAPACITY

Q_RAMP_RATE_UP_BASIC
Q_RAMP_RATE_DOWN_BASIC
Q_RAMP_RATE_UP_BASIC0
Q_RAMP_RATE_DOWN_BASIC0

Q_RESERVE_CAPABILITY
Q_RESERVE_CAPABILITY_VG
Q_RESERVE_RAMPUP_LIMIT
Q_RESERVE_RAMPDOWN_LIMIT
*The following constraint is not in RTSCUC
Q_RESERVE_SUSD_TRAJECTORY

$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC_LODF
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC
Q_RAMP_RATE_UP0_BP
Q_RAMP_RATE_DOWN0_BP
Q_RAMP_RATE_UP0_ACTUAL
Q_RAMP_RATE_DOWN0_ACTUAL

Q_STORAGE_GENERATING_START
Q_STORAGE_GENERATING
Q_PUMPMAXLIMIT
Q_STORAGE_MAX
Q_STORAGE_MIN
*The following constraint is not in RTSCUC (in the formulation but not in the constraint list)
Q_PUMPMINLIMIT2

Q_PUMPMAXLIMIT2
Q_STORAGE_END
Q_STORAGE_RESERVEUP1
Q_STORAGE_RESERVEUP2
Q_STORAGE_RESERVEDOWN1
Q_STORAGE_RESERVEDOWN2
*The following two constraints are not in RTSCUC (in the formulation but not in the constraint list)
Q_PUMP_RAMP_RATE_UP
Q_PUMP_RAMP_RATE_DOWN

Q_PUMP_RAMP_RATE_UP0_BP
Q_PUMP_RAMP_RATE_DOWN0_BP
Q_PUMP_RAMP_RATE_UP0_ACTUAL
Q_PUMP_RAMP_RATE_DOWN0_ACTUAL
*The following constraint is not in RTSCUC
Q_RESERVE_PUMP_SUSD_TRAJECTORY
****************************************08/23/2022******************************
Q_STORAGE_PUMP_EFFICIENCY9
Q_STORAGE_GEN_EFFICIENCY9
* Why those efficiency equations were not there in the first place??????????
*Q_NUCLEAR_RAMPDOWN
*Q_NUCLEAR_RAMPUP
Q_DISABLE_FC_RESERVE
Q_LTE_GEN

************************************-----------------------------------------
Q_PUMPMINLIMIT
Q_GENLIMIT_LOW_NUC
************************************------------------------------------------

***
$onText November 28,2022
Q_NUCLEAR_RAMP_STABLE1
Q_NUCLEAR_RAMP_STABLE2
Q_NUCLEAR_RAMP_STABLE3
*******************10/13/2022
Q_INITIAL_NUCLEAR_SCHEDULE_UP


Q_INITIAL_NUCLEAR_SCHEDULE_DN
$offText


/;


*     Solver_Options     *

option solvelink=5;
RTD.OptFile = 1;
RTD.threads=0;
option limrow = 10000;


*     Solve_Statement     *

SOLVE RTD USING LP MINIMIZING PRODCOST;


*     Post_Processing     *

PARAMETER VG_CURTAILMENT(GEN,INTERVAL);
VG_CURTAILMENT(VARIABLE_CAPACITY_RESOURCE,INTERVAL) = VG_FORECAST(INTERVAL,VARIABLE_CAPACITY_RESOURCE) - GEN_SCHEDULE.L(VARIABLE_CAPACITY_RESOURCE,INTERVAL);

PARAMETER MSS;
MSS=RTD.modelStat;

PARAMETER INFEASIBILITIES;
INFEASIBILITIES=RTD.numInfes;

PARAMETER SS;
SS=RTD.solveStat;

PARAMETER PUMP_SCHEDULE(GEN,INTERVAL);
PUMP_SCHEDULE(GEN,INTERVAL) = CONVENTIONAL_PUMP_SCHEDULE.L(GEN,INTERVAL) ;


*     Footer     *

execute_unload 'TOTAL_RTSCEDOUTPUT'


